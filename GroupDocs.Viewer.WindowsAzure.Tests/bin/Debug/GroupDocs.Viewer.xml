<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GroupDocs.Viewer</name>
  </assembly>
  <members>
    <member name="T:GroupDocs.Viewer.Config.ViewerConfig">
      <summary>
            Provides methods to configure Viewer handler.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Config.ViewerConfig.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Config.ViewerConfig" /> class.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.FontDirectories">
      <summary>
            The custom font directories paths
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.StoragePath">
      <summary>
            The path to the documents storage directory.
            </summary>
      <remarks>
            Storage path acts as a base location in the file system, for the documents rendering.
            When the full path to the document is not provided, API assumes that the document is located 
            in the storage directory. By default, cache files are stored in the folder, inside the storage directory.
            </remarks>
      <value>The storage path.</value>
      <example>
            The following example demonstrates how to set the storage path 
            and render document located inside the storage directory.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.StoragePath = @"C:\storage";
            
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = "document.docx";
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.CacheFolderName">
      <summary>
            The name of the folder inside the storage path
            that will be used for storing cache files.
            </summary>
      <remarks>
            This property is ignored when CachePath property is set.
            </remarks>
      <value>The cache folder name.</value>
      <example>
            The following example demonstrates how to set cache folder name.
            As the cache path has not been set, cache will be stored inside the 'C:\storage\cachefolder\'.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.StoragePath = @"C:\storage";
            config.CacheFolderName = "cachefolder";
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.CachePath">
      <summary>
            The path to the directory, where the cache will be stored.
            </summary>
      <remarks>
            When the cache path is set, the cache folder name will be ignored.
            </remarks>
      <value>The cache path.</value>
      <example>
            The following example demonstrates how to set the cache path.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.CachePath = @"C:\cachefolder\";
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.UseCache">
      <summary>
            Indicates whether to cache rendering results or not. 
            This property is obsolete, use EnableCaching property instead.
            </summary>
      <value>
        <c>true</c> if [enable caching]; otherwise, <c>false</c>.</value>
      <remarks>
            Enabling cache will let to avoid processing the same document more than once.        
            </remarks>
      <example>
            The following example demonstrates how to enable caching.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.EnableCaching">
      <summary>
            Indicates whether to cache rendering results or not.
            </summary>
      <value>
        <c>true</c> if [enable caching]; otherwise, <c>false</c>.</value>
      <remarks>
            Enabling cache will let to avoid processing the same document more than once.        
            </remarks>
      <example>
            The following example demonstrates how to enable caching.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.LocalesPath">
      <summary>
            The path to locales.
            </summary>
      <remarks>
            Locales (xml files with localized strings) if present, will be loaded from locales path directory.
            Files inside this directory should have the following naming convention: 
            "LocalizedStrings-{Language Culture Name}.xml" where {Language Culture Name} is your culture name
            e.g. "fr-FR". To learn more 
            <a href="http://www.groupdocs.com/docs/display/viewernet/Working+to+Create+and+Use+File+with+Localized+Strings">press here</a>.
            </remarks>
      <example>
            The following example demonstrates how to set locales path.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.LocalesPath = @"D:\Locales";
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.ForcePasswordValidation">
      <summary>
            Indicates whether to force password validation for protected documents.
            By default is false.
            </summary>
      <remarks>
            When the password protected document is rendered with the caching enabled, the password is not validated on subsequent calls.
            Set this option true, when you need to force checking password each time the document is rendered.
            Please note, that the password validation increases rendering time.        
            </remarks>
      <example>
            The following example demonstrates how to force password validation.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.StoragePath = @"C:\storage\";
            config.EnableCaching = true;
            config.ForcePasswordValidation = true;
            
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = "document.docx";
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Config.ViewerConfig.PageNamePrefix">
      <summary>
            The prefix for generated page name. Default is "page".
            </summary>
      <remarks>
            The page name prefix is used for naming files in the cache.
            It should not contain invalid characters, that are not allowed for file names.
            </remarks>
      <value>The page name prefix.</value>
      <example>
            The following example demonstrates how to set the page name prefix.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.PageNamePrefix = "mypageprefix";
            </code></example>
    </member>
    <member name="T:GroupDocs.Viewer.Config.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Config</b> namespace provides classes for customizing GroupDocs.Viewer behaviour.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.EmailField">
      <summary>
            List of supporter fields
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Anniversary">
      <summary>
            Default value is "Anniversary"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Attachments">
      <summary>
            Default value is "Attachments"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Bcc">
      <summary>
            Default value is "Bcc"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Birthday">
      <summary>
            Default value is "Birthday"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Business">
      <summary>
            Default value is "Business"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.BusinessAddress">
      <summary>
            Default value is "Business Address"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.BusinessFax">
      <summary>
            Default value is "Business Fax"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.BusinessHomepage">
      <summary>
            Default value is "BusinessHomepage"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Cc">
      <summary>
            Default value is "Cc"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Company">
      <summary>
            Default value is "Company"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Department">
      <summary>
            Default value is "Department"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Email">
      <summary>
            Default value is "Email"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.EmailDisplayAs">
      <summary>
            Default value is "Email Display As"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Email2">
      <summary>
            Default value is "Email2"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Email2DisplayAs">
      <summary>
            Default value is "Email2 Display As"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Email3">
      <summary>
            Default value is "Email3"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Email3DisplayAs">
      <summary>
            Default value is "Email3 Display As"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.End">
      <summary>
            Default value is "End"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.FirstName">
      <summary>
            Default value is "First Name"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.From">
      <summary>
            Default value is "From"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.FullName">
      <summary>
            Default value is "Full Name"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Gender">
      <summary>
            Default value is "Gender"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Hobbies">
      <summary>
            Default value is "Hobbies"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Home">
      <summary>
            Default value is "Home"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.HomeAddress">
      <summary>
            Default value is "Home Address"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Importance">
      <summary>
            Default value is "Importance"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.JobTitle">
      <summary>
            Default value is "Job Title"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.LastName">
      <summary>
            Default value is "Last Name"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Location">
      <summary>
            Default value is "Location"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.MiddleName">
      <summary>
            Default value is "Middle Name"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Mobile">
      <summary>
            Default value is "Mobile"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Organizer">
      <summary>
            Default value is "Organizer"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.OtherAddress">
      <summary>
            Default value is "Other Address"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.PersonalHomepage">
      <summary>
            Default value is "PersonalHomepage"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Profession">
      <summary>
            Default value is "Profession"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Recurrence">
      <summary>
            Default value is "Recurrence"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.RecurrencePattern">
      <summary>
            Default value is "Recurrence Pattern"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.RequiredAttendees">
      <summary>
            Default value is "Required Attendees"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Sent">
      <summary>
            Default value is "Sent"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.ShowTimeAs">
      <summary>
            Default value is "Show Time As"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.SpousePartner">
      <summary>
            Default value is "Spouse/Partner"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Start">
      <summary>
            Default value is "Start"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.Subject">
      <summary>
            Default value is "Subject"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.To">
      <summary>
            Default value is "To"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.UserField1">
      <summary>
            Default value is "User Field 1"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.UserField2">
      <summary>
            Default value is "User Field 2"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.UserField3">
      <summary>
            Default value is "User Field 3"
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.EmailField.UserField4">
      <summary>
            Default value is "User Field 4"
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.ImageQuality">
      <summary>
            The image quality.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.ImageQuality.Low">
      <summary>
            The acceptable quality and best performance.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.ImageQuality.Medium">
      <summary>
            Better quality and slower performance.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.ImageQuality.High">
      <summary>
            Best quality but slow performance.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.PageSize">
      <summary>
            The size of the page.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.Unknown">
      <summary>
            The default, unspecified page size.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.Letter">
      <summary>
            The size of the Letter page in points is 792 × 612
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.Ledger">
      <summary>
            The size of the Ledger page in points is 1224 × 792
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.A0">
      <summary>
            The size of the A0 page in points is 3371 × 2384
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.A1">
      <summary>
            The size of the A1 page in points is 2384 × 1685
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.A2">
      <summary>
             The size of the A2 page in points is 1684 × 1190
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.A3">
      <summary>
            The size of the A3 page in points is 1190 × 842
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.PageSize.A4">
      <summary>
            The size of the A4 page in points is 842 × 595
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.ProjectOptions">
      <summary>
            The Microsoft Project documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.ProjectOptions.PageSize">
      <summary>
            The size of the output page.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.ProjectOptions.TimeUnit">
      <summary>
            The time unit to use as minimal point.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.ProjectOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Converter.Options.ProjectOptions" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.SlidesOptions">
      <summary>
            The Presentation documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.SlidesOptions.RenderNotes">
      <summary>
             Indicates whether slide notes should be rendered.  
             Default value is false.
             </summary>
      <example>
             The following example demonstrates how to render notes from Presentation documents.
             <code lang="C#">      
             ViewerImageHandler handler = new ViewerImageHandler();
             ImageOptions options = new ImageOptions();
             options.SlidesOptions.RenderNotes = true;
            
             string guid = "DocumentWithNotes.pptx";
             List&lt;PageImage&gt; pages = handler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.SlidesOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Converter.Options.SlidesOptions" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.CadOptions">
      <summary>
            The CAD documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CadOptions.ScaleFactor">
      <summary>
             The scale factor affects the size of an output document.        
             </summary>
      <remarks>          
             Values higher than 1 will enlarge and values between 0 and 1 will make render result smaller.
             This property is ignored when either Height or Width properties are set.  
             </remarks>
      <example>
             The following example demonstrates how to set the scale factor while rendering into HTML.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CadOptions.ScaleFactor = 1.5f;
            
             string guid = "document.dwg";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CadOptions.Width">
      <summary>
             The width of the render result in pixels.        
             </summary>
      <example>
             The following example demonstrates how to set output image width in pixels.
             <code lang="C#">          
             ViewerImageHandler imageHandler = new ViewerImageHandler();
             ImageOptions options = new ImageOptions();
             options.CadOptions.Width = 850;
            
             string guid = "document.dwg";
             List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CadOptions.Height">
      <summary>
             The height of the render result in pixels.        
             </summary>
      <example>
             The following example demonstrates how to set output image height in pixels.
             <code lang="C#">          
             ViewerImageHandler imageHandler = new ViewerImageHandler();
             ImageOptions options = new ImageOptions();
             options.CadOptions.Height = 750;
            
             string guid = "document.dwg";
             List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CadOptions.RenderLayouts">
      <summary>
             Indicates whether layouts from CAD document should be rendered.  
             Default value is false.
             </summary>
      <remarks>
             This option applies only to CAD formats, that support layouts, like dxf and dwg.
             When render layouts is enabled, Model and all non-empty layouts contained in the CAD document
             will be rendered. Otherwise only Model is rendered.  
             </remarks>
      <example>
             The following example demonstrates how to render layouts from dwg drawing.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CadOptions.RenderLayouts = true;
            
             string guid = "multilayout.dwg";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CadOptions.LayoutName">
      <summary>
             The name of the specific layout to render. 
             </summary>
      <remarks>
             This property is case-insensitive.
             </remarks>
      <example>
             The following example demonstrates how to render specific layout from dwg drawing.
             <code lang="C#">          
             ViewerImageHandler imageHandler = new ViewerImageHandler();
             ImageOptions options = new ImageOptions();
             options.CadOptions.LayoutName = "layout1";
            
             string guid = "multilayout.dwg";
             List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CadOptions.Layers">
      <summary>
             The list of document layers to render.
             </summary>
      <remarks>
             When the list is empty, all layers will be rendered. Layer names are case sensitive.
             </remarks>
      <example>
             The following example demonstrates how to render specific layers from dwg drawing.
             <code lang="C#">          
             ViewerImageHandler imageHandler = new ViewerImageHandler();
             ImageOptions options = new ImageOptions();
             options.CadOptions.Layers.Add("LayerName");
            
             string guid = "multilayer.dwg";
             List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CadOptions.Tiles">
      <summary>
             The coordinates of the drawing regions, that should be rendered.
             </summary>
      <remarks>
             Please note, that this option works only for  DWG format.
             When the list is empty, then whole drawing is rendered.
             When the list contains at least one tile, then ScaleFactor, Width, Height, RenderLayouts and LayoutName properties are ignored. 
             </remarks>
      <example> 
             The following example demonstrates how to render the bottom left part of the drawing.
              /// <code lang="C#">          
             // Create image handler
             ViewerImageHandler imageHandler = new ViewerImageHandler(config);
             string guid = "document.dwg";
            
             // Get document width and height
             DocumentInfoContainer docInfo = imageHandler.GetDocumentInfo(guid);
             int width = docInfo.Pages[0].Width;
             int height = docInfo.Pages[0].Height;
             // Set tile width and height as a half of whole image 
             int tileWidth = width / 2;
             int tileHeight = height / 2;
            
             int pointX = 0;
             int pointY = 0;
             //Create image options to add bottomn left part of the drawing
             ImageOptions options = new ImageOptions();
             Tile tile = new Tile(pointX, pointY, tileWidth, tileHeight);
             
             // The pages list will contain only one image - the bottom left part of the drawing.
             List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            
             foreach (PageImage page in pages)
             {
                Console.WriteLine("Page number: {0}", page.PageNumber); 
                Stream imageContent = page.Stream;
             }
             </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.CadOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Converter.Options.CadOptions" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.TextOverflowMode">
      <summary>
            Text overflow mode for rendering Cells documents to HTML
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TextOverflowMode.Overlay">
      <summary>
            Overlay next cells even they are not empty
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TextOverflowMode.OverlayIfNextIsEmpty">
      <summary>
            Overlay next cells only if they are not empty
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TextOverflowMode.AutoFitColumn">
      <summary>
            Expand columns to fit the text
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TextOverflowMode.HideText">
      <summary>
            Hide overflow text
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.EmailOptions">
      <summary>
            The Email documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.EmailOptions.Encoding">
      <summary>
            The message encoding. 
            </summary>
      <example>
            The following example demonstrates how to set Encoding of email document when rendering as an image.
            <code lang="C#">         
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
            HtmlOptions options = new HtmlOptions();
            options.EmailOptions.Encoding = Encoding.UTF8;
            
            string guid = @"C:\storage\email.msg";        
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.EmailOptions.PageSize">
      <summary>
            The size of the output page.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.EmailOptions.FieldLabels">
      <summary>
            The message field labels.
            </summary>
      <example>
            The following example demonstrates how to change default value of the field labels.
            <code lang="C#">         
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
            HtmlOptions options = new HtmlOptions();
            options.EmailOptions.FieldLabels[EmailField.From] = "Sender";
            options.EmailOptions.FieldLabels[EmailField.To] = "Receiver";
            options.EmailOptions.FieldLabels[EmailField.Sent] = "Date";
            options.EmailOptions.FieldLabels[EmailField.Subject] = "Topic";
            
            string guid = @"C:\storage\email.msg";        
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.EmailOptions.#ctor">
      <summary>
            Initializes new instance of this class
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.TimeUnit">
      <summary>
            The time unit
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TimeUnit.Unknown">
      <summary>
            The unknown, unspecified time scale.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TimeUnit.Days">
      <summary>
            The one day interval.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TimeUnit.ThirdsOfMonths">
      <summary>
            The one third of the month.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.TimeUnit.Months">
      <summary>
            The one month interval.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.Tile">
      <summary>
            The tile represents the region on the CAD drawing, that should be rendered.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.Tile.StartPointX">
      <summary>
            The X coordinate of the lowest left point on the drawing where the tile begins.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.Tile.StartPointY">
      <summary>
            The Y coordinate of the lowest left point on the drawing where the tile begins.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.Tile.Width">
      <summary>
            The width of the tile.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.Tile.Height">
      <summary>
            The height of the tile.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.Tile.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Converter.Options.Tile" /> class.
            </summary>
      <param name="startPointX">The X coordinate of the lowest left point on the drawing where the tile begins</param>
      <param name="startPointY">The Y coordinate of the lowest left point on the drawing where the tile begins.</param>
      <param name="width">The width of the tile.</param>
      <param name="height">The height of the tile.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.Tile.GetEndPointX">
      <summary>
            Returns the X coordinate of the highest right point on the drawing where the tile ends.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.Tile.GetEndPointY">
      <summary>
            Returns the Y coordinate of the highest right point on the drawing where the tile ends.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.WordsOptions">
      <summary>
            The Text documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.WordsOptions.Encoding">
      <summary>
             The document encoding.
             </summary>
      <example>
             The following example demonstrates how to set Encoding when rendering Text documents.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.WordsOptions.Encoding = Encoding.GetEncoding("utf-8");
            
             string guid = "utf8encoded.docx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.WordsOptions.ShowTrackedChanges">
      <summary>
             Indicates whether Tracked Changes (Revisions) should be rendered or not.
             Default value is false
             </summary>
      <example>
             The following example demonstrates how to render Microsoft Word 
             or OpenOffice Text document with Tracked Changes (Revisions).        
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.WordsOptions.ShowTrackedChanges = true;
            
             string guid = "document.docx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.WordsOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Converter.Options.WordsOptions" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.CellsOptions">
      <summary>
            The Spreadsheet documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.ShowGridLines">
      <summary>
             Indicates whether to show grid lines in converted document.
             The default value is false. 
             </summary>
      <example>
             The following example demonstrates how to set ShowGridLines property.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.ShowGridLines = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.OnePagePerSheet">
      <summary>
             Specifies worksheet rendering mode.
             Default value is true.
             </summary>
      <remarks>
             When one page per sheet rendering is enabled, all worksheet content is rendered into a single page.
             Otherwise worksheet content is divided into pages, where each page includes count of rows defined
             in count rows per page option.
             </remarks>
      <example>
             The following example demonstrates how to enable one page per sheet rendering mode.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.OnePagePerSheet = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.IgnoreEmptyRows">
      <summary>
             Indicates whether empty rows should be ignored. 
             The default value is false. 
             </summary>
      <example>
             The following example demonstrates how to ignore empty rows when rendering document.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.IgnoreEmptyRows = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.Encoding">
      <summary>
             The text (*.csv) document encoding. 
             </summary>
      <example>
             The following example demonstrates how to set Encoding for rendering csv documents.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.Encoding = Encoding.GetEncoding("shift-jis");
            
             string guid = "encoded.csv";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.InternalHyperlinkPrefix">
      <summary>
             Prefix for hyperlink that references worksheet inside the same document.
             </summary>
      <remarks>
             Excel workbook may contain hyperlink to specific location in the same workbook. 
             Internal hyperlink prefix is useful for applications where workbook sheets are rendered separately one by one.
             In this case internal hyperlink may contain some REST API method address with referenced sheet name.
             Value may contain page number placeholder which will be substituted with referenced sheet number.
             </remarks>
      <example>
             The following example demonstrates how to set prefix for internal hyperlinks.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.InternalHyperlinkPrefix = "http://contoso.com/api/getPage?number={page-number}";
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.CountRowsPerPage">
      <summary>
             The number of rows rendered into one page when one page per sheet rendering mode is not enabled.
             Default value is 50.
             </summary>
      <example>
             The following example demonstrates how to set rendering of 100 rows into each page.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             ImageOptions options = new ImageOptions();
             options.CellsOptions.OnePagePerSheet = false;
             options.CellsOptions.CountRowsPerPage = 100;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.TextOverflowMode">
      <summary>
             Text overflow mode applied when the text is too big to fit into the cell.
             Default value is TextOverflowMode.OverlayIfNextIsEmpty.
             </summary>
      <remarks>
             Text overflow mode is only applicable for rendering into HTML.
             </remarks>
      <example>
             The following example demonstrates how to set TextOverflowMode property.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.TextOverflowMode = TextOverflowMode.Overlay;        
            
             string guid = "longtext.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.RenderPrintAreaOnly">
      <summary>
             Enables rendering a specific setion(s) on a worksheet(s) which is defined as print area.
             </summary>
      <example>
             The following example demonstrates how to render print area.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.RenderPrintAreaOnly = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.ShowHiddenRows">
      <summary>
             Enables rendering hidden rows.
             </summary>
      <example>
             The following example demonstrates how to render hidden rows.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.ShowHiddenRows = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.CellsOptions.ShowHiddenColumns">
      <summary>
             Enables rendering hidden columns.
             </summary>
      <example>
             The following example demonstrates how to render hidden columns.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.CellsOptions.ShowHiddenColumns = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.CellsOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Converter.Options.CellsOptions" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.ConvertImageFileType">
      <summary>
            Convert file type
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.ConvertImageFileType.PNG">
      <summary>
            PNG
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.ConvertImageFileType.JPG">
      <summary>
            JPG
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Converter.Options.ConvertImageFileType.BMP">
      <summary>
            BMP
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.PdfOptions">
      <summary>
            The PDF documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.PdfOptions.EnablePreciseRendering">
      <summary>
             Indicates whether the PDF document is rendered in a precise mode or not.        
             The default value is false. 
             </summary>
      <remarks>
             The precise rendering mode allows to keep maximum precision during positioning of glyphs on the page.
             When this option is enabled, it will degrade performance, but in certain cases will improve render result. 
            </remarks>
      <example>
             The following example demonstrates how to enable precise rendering.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.PdfOptions.EnablePreciseRendering = true;
            
             string guid = "document.pdf";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.PdfOptions.UseOriginalContentOrdering">
      <summary>
             Specifies content ordering mode when rendering into HTML. 
             The default value is false.
             </summary>
      <remarks>
             When original content ordering is enabled, text and graphics are rendered into HTML according to
             z-order in original PDF document. This mode is preferable for rendering PDF documents with multi-layered layout.
             When original content ordering is not enabled text and graphics are rendered into HTML as a single layer.
             </remarks>
      <example>
             The following example demonstrates how to enable original content ordering.
             <code lang="C#">                            
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();        
             HtmlOptions options = new HtmlOptions();
             options.PdfOptions.UseOriginalContentOrdering = true;
            
             string guid = "multilayered.pdf";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.PdfOptions.RenderLayersSeparately">
      <summary>
             Specifies whether PDF document layers have to be separated when rendering into HTML. 
             The default value is false.
             </summary>
      <remarks>
             When rendering layered PDF documents into HTML, by default all layers are rendered as one.
             Enable layers separate rendering in order to group each PDF layer into separate elements, 
             so that layers can be manipulated using Javascript.
             </remarks>
      <example>
             The following example demonstrates how to enable layers separate rendering.
             <code lang="C#">                            
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();        
             HtmlOptions options = new HtmlOptions();
             options.PdfOptions.RenderLayersSeparately = true;
            
             string guid = "multilayered.pdf";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.PdfOptions.ImageQuality">
      <summary>
             Specifies output image quality for image resources when rendering as HTML.
             The default value is Low. 
             </summary>
      <remarks>
             When rendering PDF documents which contains images it is possible to set 
             desired image quality.
             </remarks>
      <example>
             The following example demonstrates how to set best image quality.
             <code lang="C#">                            
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();        
             HtmlOptions options = new HtmlOptions();
             options.PdfOptions.ImageQuality = ImageQuality.High;
            
             string guid = "with-images.pdf";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.PdfOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Converter.Options.PdfOptions" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.HtmlOptions">
      <summary>
            Provides options for rendering document into HTML format.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.IsResourcesEmbedded">
      <summary>
            Indicates whether to embed resources into HTML or not.
            </summary>
      <remarks>
            To save resources (fonts, images and CSS) into a separate file, enable the use of cache 
            and disable resource embedding as shown in example.
            </remarks>
      <value>
        <c>true</c> if this instance is resources embedded; otherwise, <c>false</c>.</value>
      <example>
            The following example demonstrates how to separate resources from HTML.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            string guid = @"C:\storage\document.doc";
            HtmlOptions options = new HtmlOptions();
            options.IsResourcesEmbedded = false;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.EmbedResources">
      <summary>
            Indicates whether to embed resources into HTML or not.
            </summary>
      <remarks>
            To save resources (fonts, images and CSS) into a separate file, enable the use of cache 
            and disable resource embedding as shown in example.
            </remarks>
      <value>
        <c>true</c> if this instance is resources embedded; otherwise, <c>false</c>.</value>
      <example>
            The following example demonstrates how to separate resources from HTML.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            string guid = @"C:\storage\document.doc";
            HtmlOptions options = new HtmlOptions();
            options.EmbedResources = false;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.HtmlResourcePrefix">
      <summary>
            Specifies prefix for HTML resources.
            </summary>
      <remarks>
            Resource prefix may be useful when resources for document are obtained via some REST API method.
            Supported replacement patterns: {page-number}, {resource-name}.
            </remarks>
      <value>The HTML resource prefix.</value>
      <example>
            The following example demonstrates how to specify resource prefix. 
            <code lang="C#">
            HtmlOptions htmlOptions = new HtmlOptions();
            htmlOptions.IsResourcesEmbedded = false;
            htmlOptions.HtmlResourcePrefix = "http://example.com/api/getResource?name="
            </code></example>
      <example>
            The following example demonstrates how to specify resource prefix with replacement patterns. 
            <code lang="C#">
            HtmlOptions htmlOptions = new HtmlOptions();
            htmlOptions.IsResourcesEmbedded = false;
            htmlOptions.HtmlResourcePrefix = "http://example.com/api/pages/{page-number}/resources/{resource-name}"
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.IgnorePrefixInResources">
      <summary>
            Indicates whether to ignore resource prefix in nested resources. 
            Nested resource is a resource that resides inside another resource.
            </summary>
      <remarks>
            Resource prefixes when set by <see cref="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.HtmlResourcePrefix" /> option, not only apply to the references of
            HTML resources, but also apply to the references inside resources that themselves contain other resources 
            (e.g. CSS that link to external fonts or SVG images that links to other resources). In order to prevent 
            adding prefixes inside resource documents set this option true.
            </remarks>
      <example>
            The following example demonstrates how to ignore prefix when processing resources. In this example
            specified prefix will be added only inside HTML content, and will not be applied to the links inside 
            CSS or SVG documents that will be generated.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            string guid = @"C:\storage\document.doc";
            HtmlOptions htmlOptions = new HtmlOptions();
            htmlOptions.IsResourcesEmbedded = false;
            htmlOptions.HtmlResourcePrefix = "http://example.com/api/pages/{page-number}/resources/{resource-name}"
            htmlOptions.IgnorePrefixInResources = true;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.EnableResponsiveRendering">
      <summary>
            Indicates whether rendering will provide responsive web pages, that look well on different device types.
            Default value is false.
            </summary>
      <example>
            The following example demonstrates how to enable responsive rendering. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            string guid = @"C:\storage\document.doc";
            HtmlOptions options = new HtmlOptions();
            options.EnableResponsiveRendering = true;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.EnableMinification">
      <summary>
            Indicates whether output content (HTML, SVG and CSS) should be minified.
            Default value is false.
            </summary>
      <example>
            The following example demonstrates how to enable minification. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            string guid = @"C:\storage\document.doc";
            HtmlOptions options = new HtmlOptions();
            options.EnableMinification = true;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.ExcludeFonts">
      <summary>
            Indicates whether to include fonts into HTML.
            Default value is false.
            </summary>
      <remarks>
            When fonts are included, depending on <see cref="P:GroupDocs.Viewer.Converter.Options.HtmlOptions.EmbedResources" /> option, 
            they will be embedded inline as base64-encoded fonts or added as separate resources.
            </remarks>
      <example>
            The following example demonstrates how to prevent adding fonts into HTML. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            string guid = @"C:\storage\document.doc";
            HtmlOptions options = new HtmlOptions();
            options.ExcludeFonts = true;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.ImageOptions">
      <summary>
            Provides options for rendering document into Image format.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.ImageOptions.ConvertImageFileType">
      <summary>
            The format of the image file, default is PNG.
            </summary>
      <remarks>
            Specifies output image format.
            </remarks>
      <value>The type of the image file.</value>
      <example>
            The following example demonstrates how to render the document into JPG image type.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            ImageOptions options = new ImageOptions();
            options.ConvertImageFileType = ConvertImageFileType.JPG;
            string guid = @"C:\storage\document.doc";
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.ImageOptions.Width">
      <summary>
            The width of the output image in pixels.
            </summary>
      <value>The width.</value>
      <example>
            The following example demonstrates how to set the width of an output image in pixels.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            ImageOptions options = new ImageOptions();
            options.Width = 800;
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.ImageOptions.ExtractText">
      <summary>
            Indicates whether the document text with coordinates should be extracted into the file data.        
            </summary>
      <remarks>
            This option might be useful when you want to add selectable text layer over the image.
            </remarks>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.ImageOptions.Height">
      <summary>
            The height of an output image in pixels.
            </summary>
      <value>The height.</value>
      <example>
            The following example demonstrates how to set the height of an output image in pixels.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            ImageOptions options = new ImageOptions();
            options.Height = 1000;
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.ImageOptions.FileExtension">
      <summary>
            Gets the extension of an output image.
            </summary>
      <value>The file extension.</value>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
      <example>
            The following example demonstrates how to get file extension from an ImageOptions object.
            <code lang="C#">
            ImageOptions options = new ImageOptions();
            options.ConvertImageFileType = ConvertImageFileType.BMP;
            // fileExtension string will be equal to ".bmp"
            string fileExtension = options.FileExtension;
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Converter.Options.ImageOptions.#ctor">
      <summary>
            Initialize new instance of image options.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.RenderOptions">
      <summary>
            The base rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.RenderComments">
      <summary>
            Indicates whether comments should be rendered.
            Default value is false
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.PageNumber">
      <summary>
            The starting page number to render.        
            </summary>
      <remarks>        
            Will be ignored if page numbers to render are set.
            </remarks>
      <value>The page number.</value>
      <example>
            The following example demonstrates how to render the document, starting from the page number two.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            HtmlOptions options = new HtmlOptions();
            options.PageNumber = 2;
            
            string guid = @"C:\storage\document.doc";
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.CountPagesToRender">
      <summary>
            The number of pages to render.
            </summary>
      <remarks>        
            Will be ignored if page numbers to render are set.
            </remarks>
      <value>The number of pages to render.</value>
      <example>
            The following example demonstrates how to render three consecutive pages, starting from the page number two.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            HtmlOptions options = new HtmlOptions();
            options.PageNumber = 2;
            options.CountPagesToRender = 3;
            
            string guid = @"C:\storage\document.doc";
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.PageNumbersToRender">
      <summary>
            The List of page numbers to render. 
            </summary>
      <value>The list of page numbers to render.</value>
      <example>
            The following example demonstrates how to render custom page numbers.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            HtmlOptions options = new HtmlOptions();
            options.PageNumbersToRender = new List&lt;int&gt;() { 1, 2, 4 };
            
            string guid = @"C:\storage\document.doc";
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.Password">
      <summary>
            The password of the document to render.
            </summary>
      <value>The document password.</value>
      <example>
            The following example demonstrates how to specify the document password.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            HtmlOptions options = new HtmlOptions();
            options.Password = "mypass";
            
            string guid = @"C:\storage\protected.pdf";
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.JpegQuality">
      <summary>
            The JPEG image quality. Valid values are between 1 and 100.         
            </summary>
      <value>The quality.</value>
      <example>
            The following example demonstrates how to set JPEG quality.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            ImageOptions options = new ImageOptions();
            options.ConvertImageFileType = ConvertImageFileType.JPG;
            options.JpegQuality = 100;
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.ShowHiddenPages">
      <summary>
             Indicates whether hidden pages, sheets, or slides should be rendered. 
             The default value is false. 
             </summary>
      <example>
             The following example demonstrates how to enable rendering of the hidden sheets from MS Excel documents.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.ShowHiddenPages = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.DefaultFontName">
      <summary>
            The name of the default font.
            </summary>
      <remarks>
            Default font name may be specified in following cases:
            - You want to generally specify the default font to fall back on, if particular font
              in the document cannot be found during the rendering.
            - Your document uses fonts, that contain non-English characters and you want to make sure
              any missing font is replaced with one that has the same character set available.
            </remarks>
      <example>
            The following example demonstrates how to set default font.
            <code lang="C#">
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
            string guid = @"C:\storage\document.doc";
            
            HtmlOptions options = new HtmlOptions();
            options.DefaultFontName = "Tahoma";
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.Transformations">
      <summary>
            Indicates what transformations that are applied to the document should be rendered.
            </summary>
      <remarks>
            By default transformations are set to Transformation.None. Therefore transformations, 
            that are applied to the document will not be rendered if not set explicitly.
            </remarks>
      <example>
            The following example demonstrates how to render rotate and reorder transformations.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            string guid = @"C:\storage\document.doc";
            
            htmlHandler.RotatePage(new RotatePageOptions(guid, 2, 180));
            htmlHandler.ReorderPage(new ReorderPageOptions(guid, 1, 3));
            
            HtmlOptions options = new HtmlOptions();
            options.Transformations = Transformation.Rotate | Transformation.Reorder;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.Watermark">
      <summary>
            The page watermark.
            </summary>
      <value>The watermark.</value>
      <example>
            The following example demonstrates how add watermark when rendering the document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            Watermark watermark = new Watermark("This is a watermark text");
            watermark.Color = System.Drawing.Color.Blue;
            watermark.Position = WatermarkPosition.Diagonal;
            watermark.Width = 100;
            
            ImageOptions options = new ImageOptions();
            options.Watermark = watermark;
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.CellsOptions">
      <summary>
            The Spreadsheet documents rendering options.
            </summary>
      <remarks>
            Includes options to configure rendering Spreadsheet document.
            </remarks>
      <value>The Cells options.</value>
      <example>
            The following example demonstrates how to set options for rendering Spreadsheet document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.xls";
            
            ImageOptions options = new ImageOptions();
            options.CellsOptions.OnePagePerSheet = true;
            options.CellsOptions.ShowGridLines = true;        
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.WordsOptions">
      <summary>
            The Text documents rendering options.
            </summary>
      <value>The Words options.</value>
      <example>
            The following example demonstrates how to set options for rendering Text document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            ImageOptions options = new ImageOptions();
            options.WordsOptions.Encoding = Encoding.Unicode;
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.EmailOptions">
      <summary>
            The Email documents rendering options.
            </summary>
      <value>The Email options.</value>
      <example>
            The following example demonstrates how to set Email document rendering options.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            string guid = @"C:\storage\document-with-attachments.msg";
            
            HtmlOptions options = new HtmlOptions();
            options.EmailOptions.Encoding = Encoding.UTF8;
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.PdfOptions">
      <summary>
             The PDF documents rendering options.
             </summary>
      <value>The PDF options.</value>
      <example>
             The following example demonstrates how to set options for rendering PDF document.
             <code lang="C#">
             ViewerConfig config = new ViewerConfig();
             config.StoragePath = @"C:\storage\";
            
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
             string guid = "document.pdf";
            
             HtmlOptions options = new HtmlOptions();
             options.PdfOptions.PreventGlyphsGrouping = true;
            
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.CadOptions">
      <summary>
            The CAD documents rendering options.
            </summary>
      <value>The CAD options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.SlidesOptions">
      <summary>
            The Presentation documents rendering options.
            </summary>
      <value>The Slides options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Converter.Options.RenderOptions.ProjectOptions">
      <summary>
            The Project documents rendering options.
            </summary>
      <value>The Project options.</value>
    </member>
    <member name="T:GroupDocs.Viewer.Converter.Options.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Converter.Options</b> namespace provides classes that allow to specify additional options when rendering documents.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Attachment">
      <summary>
            Describes attachment.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Attachment.Size">
      <summary>
            Gets or sets attachment size.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Attachment.#ctor(System.String,System.String,System.String,System.Int64)">
      <summary>
            Creates new instance of <see cref="T:GroupDocs.Viewer.Domain.Attachment" /> class.
            </summary>
      <param name="sourceDocumentGuid">The source document GUID.</param>
      <param name="attachmentID">The attachment ID.</param>
      <param name="name">The attachment name.</param>
      <param name="size">The attachment size in bytes.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Attachment.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates new instance of <see cref="T:GroupDocs.Viewer.Domain.Attachment" /> class.
            </summary>
      <param name="sourceDocumentGuid">The source document GUID.</param>
      <param name="attachmentID">The attachment ID.</param>
      <param name="name">The attachment name.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Attachment.#ctor(System.String,System.String)">
      <summary>
            Creates new instance of <see cref="T:GroupDocs.Viewer.Domain.Attachment" /> class.
            </summary>
      <param name="sourceDocumentGuid">The source document GUID.</param>
      <param name="name">The attachment name.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Attachment.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.AttachmentBase">
      <summary>
            Base class that describes attachment.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.AttachmentBase.SourceDocumentGuid">
      <summary>
            The GUID of the source document.
            </summary>
      <remarks>
            The GUID is a file unique identifier, full path for local storage e.g. c:\\storage\\email.msg,
            relative path e.g email.msg, url e.g. http://site.com/email.msg
            </remarks>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.AttachmentBase.ID">
      <summary>
            The attachment identifier.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.AttachmentBase.Name">
      <summary>
            The name of the attachment.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.AttachmentBase.Extension">
      <summary>
            The file extension.
            </summary>
      <value>The file extension.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.AttachmentBase.DocumentType">
      <summary>
            Gets the type of the document.
            </summary>
      <value>The type of the document.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.AttachmentBase.FileType">
      <summary>
            Gets the type of the file.
            </summary>
      <value>The type of the file.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.AttachmentBase.DocumentTypeFormat">
      <summary>
            Gets the document type format.
            </summary>
      <returns>
        <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PORTABLE_DOCUMENT_FORMAT" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_WORD" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_EXCEL" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_POWERPOINT" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_VISIO" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_PROJECT" />,
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_OUTLOOK" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.OPENDOCUMENT_FORMATS" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.RICH_TEXT_FORMAT" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PLAIN_TEXT_FILE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.COMMA_SEPARATED_VALUES" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.HYPERTEXT_MARKUP_LANGUAGE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.EXTENSIBLE_MARKUP_LANGUAGE" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.XML_PAPER_SPECIFICATION" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.IMAGE_FILES" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.ELECTRONIC_PUBLICATION" />,
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.WINDOWS_ICON" /> or <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.UNKNOWN" /></returns>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.AttachmentBase.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.AttachmentBase" /> class.
            </summary>
      <param name="sourceDocumentGuid">The source document GUID.</param>
      <param name="name">The attachment name.</param>
      <param name="attachmentID">The attachment name.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.AttachmentBase.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.AttachmentBase" /> class.
            </summary>
      <param name="sourceDocumentGuid">The source document GUID.</param>
      <param name="name">The attachment name.</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.CachedDocumentDescription">
      <summary>
            Class that describes cached document.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CachedDocumentDescription.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.CacheFileDescription" /> class.
            </summary>
      <param name="sourceDocumentGuid">The attachment name</param>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.OutputExtension">
      <summary>
            The extension of the cached file.
            </summary>
      <value>The output extension.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.CellsOptions">
      <summary>
            The Spreadsheet documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.EmailOptions">
      <summary>
            The Email documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.WordsOptions">
      <summary>
            The Text documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.PdfOptions">
      <summary>
            The PDF documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.CadOptions">
      <summary>
            The CAD documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.SlidesOptions">
      <summary>
            The Presentation documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedDocumentDescription.ProjectOptions">
      <summary>
            Gets or sets the Project document rendering options.
            </summary>
      <value>The Project options.</value>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.CachedAttachmentDescription">
      <summary>
            Class that describes cached document which is an attachment from another document.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CachedAttachmentDescription.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.CacheFileDescription" /> class.
            </summary>
      <param name="sourceDocumentGuid">The attachment name</param>
      <param name="attachmentName">The attachment name</param>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedAttachmentDescription.AttachmentName">
      <summary>
            The name of the attachment.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.CacheFileDescription">
      <summary>
            Base class for cached file description.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CacheFileDescription.#ctor(System.String,System.String,GroupDocs.Viewer.Domain.CacheFileType)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.CacheFileDescription" /> class.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="name">File name with extension</param>
      <param name="cacheFileType">The cached file type</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CacheFileDescription.#ctor(System.String,GroupDocs.Viewer.Domain.CacheFileType)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.CacheFileDescription" /> class.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="cacheFileType">The cached file type</param>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CacheFileDescription.CacheFileType">
      <summary>
            The cached file type.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.CacheFileType">
      <summary>
            Enum for cached file types
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.CacheFileType.Page">
      <summary>
            The document page
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.CacheFileType.PageResource">
      <summary>
            The document page resource
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.CacheFileType.Attachment">
      <summary>
            The document attachment
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.CacheFileType.Document">
      <summary>
            The document
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.CachedPageResourceDescription">
      <summary>
             Class that describes cached document page resource.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageResourceDescription.CachedPageDescription">
      <summary>
            The cached document page descriptor.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageResourceDescription.ResourceName">
      <summary>
            The page resource name.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CachedPageResourceDescription.#ctor(GroupDocs.Viewer.Domain.CachedPageDescription,System.String)">
      <summary>
            Initializes a new instance of the <see cref="P:GroupDocs.Viewer.Domain.CachedPageResourceDescription.CachedPageDescription" /> class.
            </summary>
      <param name="сachedPageDescription"> The cached document page descriptor</param>
      <param name="resourceName">The page resource name</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.CadFileData">
      <summary>
            Represents a container for common CAD document properties.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CadFileData.Layers">
      <summary>
            The list of layers contained in a CAD document.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CadFileData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.CadFileData" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Containers.CadDocumentInfoContainer">
      <summary>
            Represents a container for CAD document description.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.CadDocumentInfoContainer.Layers">
      <summary>
            The list of layers contained in a CAD document.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Containers.DocumentFormatsContainer">
      <summary>
            Represents a container for supported document formats.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentFormatsContainer.SupportedDocumentFormats">
      <summary>
            The supported document formats where key is extension e.g. "pdf" 
            and value is document type format e.g. "Portable Document Format".
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer">
      <summary>
            Represents a container for document description.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.Guid">
      <summary>
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </summary>
      <value>The file unique identifier.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.Name">
      <summary>
            The file name.
            </summary>
      <value>The file name.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.Extension">
      <summary>
            The file extension.
            </summary>
      <value>The file extension.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.Size">
      <summary>
            The file size in bytes.
            </summary>
      <value>The size.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.LastModificationDate">
      <summary>
            The last modification date.
            </summary>
      <value>The last modification date.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.DocumentType">
      <summary>
            The type of the document.
            </summary>
      <value>The type of the document.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.DocumentTypeFormat">
      <summary>
            The document type format.
            </summary>
      <returns>
        <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PORTABLE_DOCUMENT_FORMAT" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_WORD" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_EXCEL" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_POWERPOINT" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_VISIO" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_PROJECT" />,
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_OUTLOOK" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.OPENDOCUMENT_FORMATS" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.RICH_TEXT_FORMAT" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PLAIN_TEXT_FILE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.COMMA_SEPARATED_VALUES" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.HYPERTEXT_MARKUP_LANGUAGE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.EXTENSIBLE_MARKUP_LANGUAGE" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.XML_PAPER_SPECIFICATION" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.IMAGE_FILES" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.ELECTRONIC_PUBLICATION" />,
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.WINDOWS_ICON" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.WINDOWS_METAFILE" />,
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.LATEX" /> or <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.UNKNOWN" /><see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.POSTSCRIPT" /> or <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.UNKNOWN" /></returns>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.FileType">
      <summary>
            The type of the file.
            </summary>
      <value>The type of the file.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.DateCreated">
      <summary>
            The created time.
            </summary>
      <value>The created time.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.Pages">
      <summary>
            The pages data.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.Attachments">
      <summary>
            The attachments.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Containers.DocumentInfoContainer" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Containers.FileContainer">
      <summary>
            The file container.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.FileContainer.Stream">
      <summary>
            The file content.
            </summary>
      <value>The stream.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.FileContainer.FileName">
      <summary>
            The name of the file.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Containers.FileContainer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Containers.FileContainer.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" /> class.
            </summary>
      <param name="stream">The file content.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Containers.FileContainer.#ctor(System.String,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" /> class.
            </summary>
      <param name="fileName">The name of the file.</param>
      <param name="stream">The file content.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Containers.FileContainer.Dispose">
      <summary>
            Releases resources
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Containers.PrintableHtmlContainer">
      <summary>
            Represents a container for printable html.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.PrintableHtmlContainer.HtmlContent">
      <summary>
            The HTML content.
            </summary>
      <value>The HTML content.</value>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Containers.FileListContainer">
      <summary>
            Represents a container for file and directories list.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Containers.FileListContainer.Files">
      <summary>
            The list of files and directories.
            </summary>
      <value>Files and directories list</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Containers.FileListContainer.#ctor(System.Collections.Generic.List{GroupDocs.Viewer.Domain.FileDescription})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Containers.FileListContainer" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Containers.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Domain.Containers</b> namespace provides classes for working with document rendering results.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.DocumentTypeName">
      <summary>
            The document type name.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.WORDS">
      <summary>
            Default is "Words". Include the following file types: doc, docm, docx, dot, dotm, dotx, rtf, txt, odt, ott, html, xml, mht.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.CELLS">
      <summary>
            Default is "Cells". Include the following file types: xls, xlsx, xlsm, xlsb, xltx, xltm, csv, xls2003, ods.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.SLIDES">
      <summary>
            Default is "Slides". Include the following file types: ppt, pps, pptx, ppsx, ppsm, potm, pptm, potx, odp. 
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.PDF">
      <summary>
            Default is "Pdf". Include the following file types: epub, pdf, xps.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.DIAGRAM">
      <summary>
            Default is "Diagram". Include the following file types: vsd, vdx, vss, vsx, vst, vtx, vsdx, vdw, vssx, vstx, vstm, vsdm, vssm.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.PROJECT">
      <summary>
            Default is "Project". Include the following file types: mpp, mpt.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.IMAGE">
      <summary>
            Default is "Image". Include the following file types: psd, bmp, gif, jpg, jpeg, png, ico.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.TAGGEDIMAGE">
      <summary>
            Default is "TaggedImage". Include the following file types: tif, tiff.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.CAD">
      <summary>
            Default is "CAD". Include the following file types: dwg, dxf, ifc, stl.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.EMAIL">
      <summary>
            Default is "Email". Include the following file types: msg, eml, emlx.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.DJVU">
      <summary>
            Default is "Djvu". Include the following file types: Djvu.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.DICOM">
      <summary>
            Default is "Dicom". Include the following file types: Dicom.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.SVG">
      <summary>
            Default is "Svg". Include the following file types: svg.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.NOTE">
      <summary>
            Default is "Note". Include the following file types: one.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeName.UNKNOWN">
      <summary>
            Default is "Unknown".
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.DocumentTypeFormat">
      <summary>
            The document type format.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PORTABLE_DOCUMENT_FORMAT">
      <summary>
            Define Portable Document Format documents. Include the following file types: pdf.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_WORD">
      <summary>
            Define Microsoft Word documents. Include the following file types: doc, docx, docm, dot, dotx, dotm.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MOBIPOCKET">
      <summary>
            Define Mobipocket e-book format. Include the following file types: mobi.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_EXCEL">
      <summary>
            Define Microsoft Excel documents. Include the following file types: xls, xlsx, xlsm, xlsb, xltx, xltm.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_POWERPOINT">
      <summary>
            Define Microsoft PowerPoint documents. Include the following file types: ppt, pptx, ppsm, potm, pps, ppsx, pptm, potx.
             </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_VISIO">
      <summary>
            Microsoft Visio documents. Include the following file types: vsd, vdx, vss, vsx, vst, vtx, vsdx, vdw, vssx, vstx, vstm, vsdm, vssm.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_PROJECT">
      <summary>
            Define Microsoft Project documents. Include the following file types: mpp, mpt.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_OUTLOOK">
      <summary>
            Define Microsoft Outlook documents. Include the following file types: msg, eml.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_ONENOTE">
      <summary>
            Define Microsoft OneNote documents. Include the following file types: one.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.APPLE_MAIL">
      <summary>
            Define Apple Mail documents. Include the following file types: emlx.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.OPENDOCUMENT_FORMATS">
      <summary>
            Define OpenDocument Formats documents. Include the following file types: odt, ott, ods, odt, otp, ots.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.RICH_TEXT_FORMAT">
      <summary>
            Define Rich Text Format documents. Include the following file types: rtf.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PLAIN_TEXT_FILE">
      <summary>
            Define Plain Text File documents. Include the following file types: txt.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.COMMA_SEPARATED_VALUES">
      <summary>
            Define Comma-Separated Values documents. Include the following file types: csv.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.HYPERTEXT_MARKUP_LANGUAGE">
      <summary>
            Define HyperText Markup Language documents. Include the following file types: html, mht.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.EXTENSIBLE_MARKUP_LANGUAGE">
      <summary>
            Define Extensible Markup Language documents. Include the following file types: xml.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.XML_PAPER_SPECIFICATION">
      <summary>
            Define XML Paper Specification documents. Include the following file types: xps.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.CAD_DRAWING_FILE_FORMAT">
      <summary>
            Define CAD Drawing File Format documents. Include the following file types: dxf, dwg, dwf, ifc, stl.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.DICOM_DRAWING_FILE_FORMAT">
      <summary>
            Define Digital Imaging and Communications in Medicine documents. Include the following file types: dcm.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.IMAGE_FILES">
      <summary>
            Define Image files documents. Include the following file types: bmp, gif, jpg, jpeg, jp2, j2c, j2k, jpf, jpx, jpm, png, tiff, djvu, webp, svg, dng.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.ELECTRONIC_PUBLICATION">
      <summary>
            Define Electronic publication documents. Include the following file types: epub.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.WINDOWS_ICON">
      <summary>
            Define Windows Icon documents. Include the following file types: ico.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.WINDOWS_METAFILE">
      <summary>
            Define Windows Icon documents. Include the following file types: wmf, emf.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.LATEX">
      <summary>
            Define LaTeX Scientific documents. Include the following file types: tex.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.POSTSCRIPT">
      <summary>
            Define PostScript documents. Include the following file types: ps and eps.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.UNKNOWN">
      <summary>
            Define unknown documents.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.FileListOptions">
      <summary>
            Provides options for loading the list of files.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.FileListOptions.Path">
      <summary>
            The custom path to retrieve the files and folders.
            </summary>
      <value>The path.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.FileListOptions.SortBy">
      <summary>
            The parameter to sort by.
            </summary>
      <value>The sort by.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.FileListOptions.OrderBy">
      <summary>
            The order of files (ascending or descending).
            </summary>
      <value>The order.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.FileListOptions.#ctor(System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.FileListOptions" /> class.
            </summary>
      <param name="path">The path</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.FileListOptions.#ctor(System.String,GroupDocs.Viewer.Domain.Options.FileListOptions.FileListSortBy,GroupDocs.Viewer.Domain.Options.FileListOptions.FileListOrderBy)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.FileListOptions" /> class.
            </summary>
      <param name="path">The path</param>
      <param name="sortBy">The sort by field</param>
      <param name="orderBy">The order by field</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListSortBy">
      <summary>
            Enumeration for file list sort.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListSortBy.Unknown">
      <summary>
            No sort
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListSortBy.Name">
      <summary>
            Order by Name
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListSortBy.LastModificationDate">
      <summary>
            Order by LastModificationDate 
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListSortBy.Size">
      <summary>
            Order by Size
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListOrderBy">
      <summary>
            Enumeration for file list order.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListOrderBy.Ascending">
      <summary>
            Order by Ascending
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Options.FileListOptions.FileListOrderBy.Descending">
      <summary>
            Order by Descending
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions">
      <summary>
            Provides options for obtaining the document properties.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.Password">
      <summary>
            The password.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.RenderComments">
      <summary>
            Indicates whether comments should be rendered.
            Default value is false
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.ExtractText">
      <summary>
            Indicates whether the document text with coordinates 
            should be extracted into the file data when rendering as an image.        
            </summary>
      <remarks>
            This option might be useful when you want to add selectable text layer over the image.
            </remarks>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.ShowHiddenPages">
      <summary>
             Indicates whether hidden pages, sheets or slides should be rendered. 
             The default value is false. 
             </summary>
      <example>
             The following example demonstrates how to enable rendering of the hidden sheets from MS Excel documents.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.ShowHiddenPages = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.DefaultFontName">
      <summary>
            The name of the default font.
            </summary>
      <remarks>
            Default font name may be specified in following cases:
            - You want to generally specify the default font to fall back on, if particular font
              in the document cannot be found during rendering.
            - Your document uses fonts, that contain non-English characters and you want to make sure
              any missing font is replaced with one that has the same character set available.
            </remarks>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.CellsOptions">
      <summary>
            The Spreadsheet documents rendering options.
            </summary>
      <value>The Cells options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.WordsOptions">
      <summary>
            The Text documents rendering options.
            </summary>
      <value>The Words options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.EmailOptions">
      <summary>
            The Email documents rendering options.
            </summary>
      <value>The Email options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.PdfOptions">
      <summary>
            The PDF documents rendering options.
            </summary>
      <value>The PDF options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.CadOptions">
      <summary>
            The CAD documents rendering options.
            </summary>
      <value>The CAD options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.SlidesOptions">
      <summary>
            The Presentation documents rendering options.
            </summary>
      <value>The Slides options.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.ProjectOptions">
      <summary>
            Gets or sets the Project document rendering options.
            </summary>
      <value>The Project options.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.DocumentInfoOptions" /> class.
            </summary>
      <param name="password">The password.</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions">
      <summary>
            Provides options for rendering document into PDF format.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.Password">
      <summary>
            The file password.
            </summary>
      <value>The password.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.JpegQuality">
      <summary>
            The quality of the JPEG images contained in resulting PDF document. 
            Valid values are between 1 and 100. Default value is 90.
            </summary>
      <remarks>
            This property affects the size of resulting PDF document and the quality of JPEG images contained in it.
            </remarks>
      <value>The quality.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.RenderComments">
      <summary>
            Indicates whether comments should be rendered.
            Default value is false
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.ShowHiddenPages">
      <summary>
             Indicates whether hidden pages, sheets or slides should be rendered. 
             The default value is false. 
             </summary>
      <example>
             The following example demonstrates how to enable rendering of the hidden sheets from MS Excel documents.
             <code lang="C#">          
             ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler();
             HtmlOptions options = new HtmlOptions();
             options.ShowHiddenPages = true;
            
             string guid = "document.xlsx";
             List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
             </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.Watermark">
      <summary>
            The watermark.
            </summary>
      <value>The watermark.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.Transformations">
      <summary>
            Indicates what transformations that are applied to the document should be rendered.
            </summary>
      <remarks>
            By default transformations are set to Transformation.None.
            Therefore transformations will not be rendered if not set explicitly.
            </remarks>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.DefaultFontName">
      <summary>
            The name of the default font.
            </summary>
      <remarks>
            Default font name may be specified in following cases:
            - You want to generally specify the default font to fall back on, if particular font
              in the document cannot be found during rendering.
            - Your document uses fonts, that contain non-English characters and you want to make sure
              any missing font is replaced with one that has the same character set available.
            </remarks>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.CellsOptions">
      <summary>
            The Spreadsheet documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.EmailOptions">
      <summary>
            The Email documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.WordsOptions">
      <summary>
            The Text documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.PdfOptions">
      <summary>
            The PDF documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.CadOptions">
      <summary>
            The CAD documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.SlidesOptions">
      <summary>
            The Presentation documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PdfFileOptions.ProjectOptions">
      <summary>
            The Project documents rendering options.
            </summary>
      <value>The Project options.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor(GroupDocs.Viewer.Domain.Transformation)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
      <param name="transformations">The desired transformations.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor(GroupDocs.Viewer.Domain.Watermark)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
      <param name="watermark">The watermark.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor(GroupDocs.Viewer.Domain.Transformation,GroupDocs.Viewer.Domain.Watermark)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
      <param name="transformations">The desired transformations.</param>
      <param name="watermark">The watermark</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
      <param name="password">The file password.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor(System.String,GroupDocs.Viewer.Domain.Transformation)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
      <param name="password">The file password.</param>
      <param name="transformations">The desired transformations.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor(System.String,GroupDocs.Viewer.Domain.Watermark)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
      <param name="password">The file password.</param>
      <param name="watermark">The watermark.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PdfFileOptions.#ctor(System.String,GroupDocs.Viewer.Domain.Transformation,GroupDocs.Viewer.Domain.Watermark)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PdfFileOptions" /> class.
            </summary>
      <param name="password">The file password.</param>
      <param name="transformations">The desired transformations.</param>
      <param name="watermark">The watermark</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions">
      <summary>
            Provides options for obtaining document HTML content designed for printing.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions.Css">
      <summary>
            The CSS.
            </summary>
      <remarks>
            The style sheets content will be added to printable HTML.
            </remarks>
      <value>The CSS.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions.Watermark">
      <summary>
            The watermark.
            </summary>
      <value>The watermark.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions.#ctor(System.String,GroupDocs.Viewer.Domain.Watermark)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions" /> class.
            </summary>
      <param name="css">The css</param>
      <param name="watermark">The watermark</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions" /> class.
            </summary>
      <param name="css">The css</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions.#ctor(GroupDocs.Viewer.Domain.Watermark)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions" /> class.
            </summary>
      <param name="watermark">The watermark</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.ReorderPageOptions">
      <summary>
            Provides options for reordering document pages.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.ReorderPageOptions.Password">
      <summary>
            The password.
            </summary>
      <value>The password.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.ReorderPageOptions.PageNumber">
      <summary>
            The page number.
            </summary>
      <value>The page number.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.ReorderPageOptions.NewPosition">
      <summary>
            The new page position.
            </summary>
      <value>The new page position.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.ReorderPageOptions.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.ReorderPageOptions" /> class.
            </summary>
      <param name="pageNumber">The page number</param>
      <param name="newPosition">The new page position</param>
      <param name="password">The password</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.ReorderPageOptions.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.ReorderPageOptions" /> class.
            </summary>
      <param name="pageNumber">The page number</param>
      <param name="newPosition">The new page position</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.RotatePageOptions">
      <summary>
            Provides options for rotating the document pages.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.RotatePageOptions.Password">
      <summary>
            The password.
            </summary>
      <value>The password.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.RotatePageOptions.PageNumber">
      <summary>
            The page number.
            </summary>
      <value>The page number.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Options.RotatePageOptions.RotationAngle">
      <summary>
            The rotation angle.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.RotatePageOptions.#ctor(System.Int32,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.RotatePageOptions" /> class.
            </summary>
      <param name="pageNumber">The page number</param>
      <param name="rotationAngle">The rotation angle</param>
      <param name="password">The password</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Options.RotatePageOptions.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Options.RotatePageOptions" /> class.
            </summary>
      <param name="pageNumber">The page number</param>
      <param name="rotationAngle">The rotation angle</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Options.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Domain.Options</b> namespace provides classes for setting rendering options dependent on document type.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.FileData">
      <summary>
            Represents a container for common document properties.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileData.DateModified">
      <summary>
            The last modification date.
            </summary>
      <value>The last modification date.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileData.DateCreated">
      <summary>
            The created time.
            </summary>
      <value>The created time.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileData.Pages">
      <summary>
            The list of pages.
            </summary>
      <value>The pages.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileData.TextExtracted">
      <summary>
            Indicates whether the text has been extracted.
            </summary>
      <value>The text extracted or not.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileData.Attachments">
      <summary>
            The attachments.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.FileData" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileData.AddPage(System.Int32,System.Int32)">
      <summary>
            Adds page data to the list of pages.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileData.AddPage(System.String,System.Int32,System.Int32)">
      <summary>
            Adds page data to the list of pages.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileData.AddPage(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Adds page data to the list of pages.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileData.AddPage(System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Adds page data to the list of pages.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileData.AddPage(System.Int32,System.Int32,System.Collections.Generic.List{GroupDocs.Viewer.Domain.RowData})">
      <summary>
            Adds page data to the list of pages.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Page">
      <summary>
            Represents a container for page description.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Page.PageNumber">
      <summary>
            The page number.
            </summary>
      <value>The page number.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Page.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Page" /> class.
            </summary>
      <param name="pageNumber">The page number.</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.PageData">
      <summary>
            Represents a container for page data description.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.PageData.Number">
      <summary>
            The page number.
            </summary>
      <value>The number.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.PageData.Name">
      <summary>
            The page name.
            </summary>
      <value>The page name.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.PageData.Angle">
      <summary>
            The page angle.
            </summary>
      <value>The angle.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.PageData.Width">
      <summary>
            The page width.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.PageData.Height">
      <summary>
            The page height.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.PageData.Rows">
      <summary>
            The list of text rows.
            </summary>
      <value>The rows.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.PageData.IsVisible">
      <summary>
            Indicates whether the page is visible or not.
            </summary>
      <value>The rows.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.PageData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.PageData" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.RowData">
      <summary>
            Represents a container for PDF file text row description.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.RowData.LineLeft">
      <summary>
            The distance from the left most point of an image.
            </summary>
      <value>The line left.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.RowData.LineTop">
      <summary>
            The distance from the top most point of an image.
            </summary>
      <value>The line top.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.RowData.LineWidth">
      <summary>
            The width of the line.
            </summary>
      <value>The width of the line.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.RowData.LineHeight">
      <summary>
            The height of the line.
            </summary>
      <value>The height of the line.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.RowData.Text">
      <summary>
            The full text of the row.
            </summary>
      <value>The text.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.RowData.TextCoordinates">
      <summary>
            The list of coordinates for every word in the row.
            </summary>
      <value>The text coordinates.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.RowData.CharacterCoordinates">
      <summary>
            The list of coordinates for every character in the row.
            </summary>
      <value>The character coordinates.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.RowData.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.RowData" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Transformation">
      <summary>
            The document transformation flags.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Transformation.None">
      <summary>
            No transformations
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Transformation.Rotate">
      <summary>
            Rotate transformation
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Transformation.Reorder">
      <summary>
            Reorder transformation
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Transformation.AddPrintAction">
      <summary>
            Indicates whether print action should be added to the pdf document or not.
            The print action is JavaScript action that opens print dialog when pdf document is opened.
            This transformation used only in GetPdfFile method, in other methods it is ignored. 
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Watermark">
      <summary>
            Represents a container for the page watermark properties.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Watermark.Text">
      <summary>
            The watermark text.
            </summary>
      <value>The text.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Watermark.Color">
      <summary>
            The watermark text color.
            </summary>
      <value>The color.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Watermark.Position">
      <summary>
            The watermark position.
            </summary>
      <value>The position.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Watermark.Width">
      <summary>
            The watermark width.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Watermark.FontName">
      <summary>
            The watermark text font name e.g. "MS Gothic" or "Verdana". 
            In case you want to specify custom font please add path to the font directories list in ViewerConfig class.
            </summary>
      <value>The font name.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Watermark.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Watermark" /> class.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Watermark.#ctor(System.String,System.Nullable{System.Drawing.Color},System.Nullable{GroupDocs.Viewer.Domain.WatermarkPosition},System.Nullable{System.Single})">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Watermark" /> class.
            </summary>
      <param name="text">The text.</param>
      <param name="color">The color.</param>
      <param name="position">The position.</param>
      <param name="width">The width.</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.WatermarkPosition">
      <summary>
            Page watermark position enumeration
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.WatermarkPosition.Diagonal">
      <summary>
            The diagonal
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.WatermarkPosition.TopLeft">
      <summary>
            The top left
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.WatermarkPosition.TopCenter">
      <summary>
            The top center
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.WatermarkPosition.TopRight">
      <summary>
            The top right
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.WatermarkPosition.BottomLeft">
      <summary>
            The bottom left
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.WatermarkPosition.BottomCenter">
      <summary>
            The bottom center
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.WatermarkPosition.BottomRight">
      <summary>
            The bottom right
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Html.HtmlResource">
      <summary>
            Represents a container for HTML resource description.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.ResourceName">
      <summary>
            The HTML resource file name.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.ResourceType">
      <summary>
            The type of the HTML resource.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.DocumentPageNumber">
      <summary>
            The document page number.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.CellsOptions">
      <summary>
            The Spreadsheet documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.EmailOptions">
      <summary>
            The Email documents rendering options.
            </summary> { get; set; }
        </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.WordsOptions">
      <summary>
            The Text documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.PdfOptions">
      <summary>
            The PDF documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.CadOptions">
      <summary>
            The CAD documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.HtmlResource.ProjectOptions">
      <summary>
            Gets or sets the Project document rendering options.
            </summary>
      <value>The Project options.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Html.HtmlResource.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Html.HtmlResource" /> class.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Html.HtmlResourceType">
      <summary>
            HTML resource types (images, fonts, style sheets and graphics)
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Html.HtmlResourceType.Other">
      <summary>
            Other resources
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Html.HtmlResourceType.Image">
      <summary>
            Image
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Html.HtmlResourceType.Font">
      <summary>
            Font
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Html.HtmlResourceType.Style">
      <summary>
            CSS style sheet
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Domain.Html.HtmlResourceType.Graphics">
      <summary>
            SVG graphics
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Html.PageHtml">
      <summary>
            Represents a container for the page rendered to HTML.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.PageHtml.HtmlContent">
      <summary>
            The content of the HTML page.
            </summary>
      <value>The content of the HTML page.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Html.PageHtml.HtmlResources">
      <summary>
            The list of resources.
            </summary>
      <value>The list of resources.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Html.PageHtml.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Html.PageHtml" /> class.
            </summary>
      <param name="pageNumber">The page number.</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Html.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Domain.Html</b> namespace provides classes for working with document HTML representation.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Image.PageImage">
      <summary>
            Represents a container for the page rendered to Image.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.Image.PageImage.Stream">
      <summary>
            The page stream.
            </summary>
      <value>The stream.</value>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Image.PageImage.#ctor(System.Int32,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Image.PageImage" /> class.
            </summary>
      <param name="pageNumber">The page number.</param>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Image.PageImage.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.Image.PageImage" /> class.
            </summary>
      <param name="pageNumber">The page number.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.Image.PageImage.Dispose">
      <summary>
            Releases resources
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.Image.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Domain.Image</b> namespace provides classes for working with document image representation.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.WindowsAuthenticationCredential">
      <summary>
            Represents a container for the windows authentication credentials.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.WindowsAuthenticationCredential.UserName">
      <summary>
            The user name.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.WindowsAuthenticationCredential.Password">
      <summary>
            The password.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.WindowsAuthenticationCredential.Domain">
      <summary>
            The domain name.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.WindowsAuthenticationCredential.#ctor(System.String,System.String)">
      <summary>
            Initializes new instance of windows authentication credential.
            </summary>
      <param name="userName">The use name.</param>
      <param name="password">The password.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.WindowsAuthenticationCredential.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes new instance of windows authentication credential.
            </summary>
      <param name="userName">The user name.</param>
      <param name="password">The password.</param>
      <param name="domain">The domain.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.WindowsAuthenticationCredential.ToNetworkCredential">
      <summary>
            Maps windows authentication credential to network credential.
            </summary>
      <returns>Network credential.</returns>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.CachedPageDescription">
      <summary>
            Class that describes cached document page.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CachedPageDescription.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.CachedPageDescription" /> class.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt </param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.CachedPageDescription.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.CachedPageDescription" /> class.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt</param>
      <param name="name">File name with extension</param>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.PageNumber">
      <summary>
            The page number.
            </summary>
      <value>The page number.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.Width">
      <summary>
            The page width.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.Height">
      <summary>
            The page height.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.JpegQuality">
      <summary>
            The JPEG quality.
            </summary>
      <value>The JPEG quality</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.ExtractText">
      <summary>
            Indicates whether the document text has been extracted.        
            </summary>
      <value>
        <c>true</c> if [text extracted]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.OutputExtension">
      <summary>
            The extension of the cached file.
            </summary>
      <value>The output extension.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.CellsOptions">
      <summary>
            The Spreadsheet documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.EmailOptions">
      <summary>
            The Email documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.WordsOptions">
      <summary>
            The Text documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.PdfOptions">
      <summary>
            The PDF documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.CadOptions">
      <summary>
            The CAD documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.SlidesOptions">
      <summary>
            The Presentation documents rendering options.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.CachedPageDescription.ProjectOptions">
      <summary>
            Gets or sets the Project document rendering options.
            </summary>
      <value>The Project options.</value>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.FileDescription">
      <summary>
            Represents a container for file description.
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.Guid">
      <summary>
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt
            </summary>
      <value>The file unique identifier.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.Name">
      <summary>
            The file name.
            </summary>
      <example>
            The following example demonstrates how to get the name of the file.
            <code lang="C#">
            string guid = @"C:\storage\document.doc";
            FileDescription fileDescription = new FileDescription(guid);
            Console.WriteLine(fileDescription.Name);
            //Result will be "document.doc".
            </code></example>
      <value>The file name.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.Extension">
      <summary>
            Gets the file extension.
            </summary>
      <example>
            The following example demonstrates how to get extension of the file.
            <code lang="C#">
            string guid = @"C:\storage\document.doc";
            FileDescription fileDescription = new FileDescription(guid);
            Console.WriteLine(fileDescription.Extension);
            //Result will be ".doc".
            </code></example>
      <value>The file extension.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.Size">
      <summary>
            The size of the document in bytes.
            </summary>
      <example>
            The following example demonstrates how to get the size of the document in bytes.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.StoragePath = @"C:\storage";
            
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            FileListContainer container = imageHandler.GetFileList();
            
            foreach (FileDescription fileDescription in container.Files)
            {
                if (!fileDescription.IsDirectory) 
                { 
                   Console.WriteLine("File size is {0}", fileDescription.Size);
                }
            }
            </code></example>
      <value>The size.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.LastModificationDate">
      <summary>
            The last modification date.
            </summary>
      <example>
            The following example demonstrates how to get the document last modification date.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.StoragePath = @"C:\storage";
            
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            FileListContainer container = imageHandler.GetFileList();
            
            foreach (FileDescription fileDescription in container.Files)
            {
                if (!fileDescription.IsDirectory) 
                { 
                   Console.WriteLine("File size is {0}", fileDescription.LastModificationDate);
                }
            }
            </code></example>
      <value>The last modification date.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.BaseName">
      <summary>
            Gets base name of the document.
            </summary>
      <example>
            The following example demonstrates how to get base name of the document.
            <code lang="C#">
            string guid = @"C:\storage\document.doc";
            FileDescription fileDescription = new FileDescription(guid);
            Console.WriteLine(fileDescription.BaseName);
            //Result will be "document".
            </code></example>
      <value>The name of the base.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.IsDirectory">
      <summary>
            Indicates whether file or folder.
            </summary>
      <example>
            The following example demonstrates how to determine if FileDescription object refers to the file or folder.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.StoragePath = @"C:\storage";
            
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            FileListContainer container = imageHandler.GetFileList();
            
            foreach (FileDescription fileDescription in container.Files)
            {
                if (fileDescription.IsDirectory) 
                { 
                    /*is a folder*/
                }
                else 
                {
                    /*is a file*/
                }
            }
            </code></example>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.DocumentType">
      <summary>
            Gets the type of the document.
            </summary>
      <returns>
        <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.WORDS" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.CELLS" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.SLIDES" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.PDF" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.DIAGRAM" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.PROJECT" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.IMAGE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.TAGGEDIMAGE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.CAD" />. 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.EMAIL" />. 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.DJVU" />. 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.DICOM" />. 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.NOTE" />.
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeName.UNKNOWN" />. 
            </returns>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.FileType">
      <summary>
            Gets the file type.
            </summary>
      <value>The type of the file.</value>
    </member>
    <member name="P:GroupDocs.Viewer.Domain.FileDescription.DocumentTypeFormat">
      <summary>
            Gets the document type format.
            </summary>
      <returns>
        <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PORTABLE_DOCUMENT_FORMAT" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_WORD" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_EXCEL" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_POWERPOINT" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_VISIO" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_PROJECT" />,
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MICROSOFT_OUTLOOK" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.OPENDOCUMENT_FORMATS" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.RICH_TEXT_FORMAT" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.PLAIN_TEXT_FILE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.COMMA_SEPARATED_VALUES" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.HYPERTEXT_MARKUP_LANGUAGE" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.EXTENSIBLE_MARKUP_LANGUAGE" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.XML_PAPER_SPECIFICATION" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.IMAGE_FILES" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.ELECTRONIC_PUBLICATION" />,
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.WINDOWS_ICON" />, <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.DICOM_DRAWING_FILE_FORMAT" />, 
            <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.MOBIPOCKET" /> or <see cref="F:GroupDocs.Viewer.Domain.DocumentTypeFormat.UNKNOWN" /></returns>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileDescription.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.FileDescription" /> class. IsDirectory flag will be set to false.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt
            </param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileDescription.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.FileDescription" /> class. IsDirectory flag will be set to false.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt
            </param>
      <param name="name">File name with extension</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileDescription.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.FileDescription" /> class. IsDirectory flag will be set to false.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt
            </param>
      <param name="isDirectory">Indicates whether file or folder</param>
    </member>
    <member name="M:GroupDocs.Viewer.Domain.FileDescription.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Domain.FileDescription" /> class.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt
            </param>
      <param name="name">File name with extension</param>
      <param name="isDirectory">Indicates whether file or folder</param>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Domain</b> namespace provides common classes to operate with GroupDocs.Viewer.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Domain.NamespaceGroupDoc">
      <summary>
            The <b>GroupDocs.Viewer.Domain</b> namespace provides common classes to operate with GroupDocs.Viewer.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.GroupDocsViewerException">
      <summary>
            GroupDocs.Viewer general exception
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Exception.GroupDocsViewerException.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Exception.GroupDocsViewerException.#ctor(System.String)">
      <summary>
            Throw exception with specific message
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.TransformationFailedPageNotExistException">
      <summary>
            Thrown while performing file transformations and desired page not exists in document.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.CacheFileNotFoundException">
      <summary>
            Thrown if a cached file was not found.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.InvalidPasswordException">
      <summary>
            Thrown if a document is encrypted with a password and the password specified when opening the document is incorrect.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.GuidNotSpecifiedException">
      <summary>
            Thrown during document load, when the document GUID was not specified.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.StoragePathNotSpecifiedException">
      <summary>
            Thrown when trying to load file from storage or to cache file to storage, but storage path was not specified.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.CorruptedOrDamagedFileException">
      <summary>
            Thrown during document load, when the document appears to be corrupted and impossible to load.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.FileTypeNotSupportedException">
      <summary>
            Thrown during document load, when the document format is not recognized or not supported by GroupDocs.Viewer.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.PasswordProtectedFileException">
      <summary>
             Thrown if a document is encrypted with a password and the password specified when opening the document is missing.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Exception.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Exception</b> namespace provides classes for exceptions which can occur while working with a document.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler">
      <summary>
            Exposes members for caching rendering results.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.Exists(GroupDocs.Viewer.Domain.CacheFileDescription)">
      <summary>
            Checks whether specified file description existed in cache.
            </summary>
      <param name="cacheFileDescription">The cache file description.</param>
      <returns>System.Boolean.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.GetInputStream(GroupDocs.Viewer.Domain.CacheFileDescription)">
      <summary>
            Gets the input stream.
            </summary>
      <param name="cacheFileDescription">The cache file description.</param>
      <returns>GroupDocs.Viewer.Handler.Cache.StreamResult</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.GetOutputSaveStream(GroupDocs.Viewer.Domain.CacheFileDescription)">
      <summary>
            Gets the stream for saving cached file.
            </summary>
      <param name="cacheFileDescription">The cache file description.</param>
      <returns>GroupDocs.Viewer.Handler.Cache.StreamResult</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.GetLastModificationDate(GroupDocs.Viewer.Domain.CacheFileDescription)">
      <summary>
            Gets the cached file last modification date.
            </summary>
      <param name="cacheFileDescription">The cache file description.</param>
      <returns>System.Nullable&lt;System.DateTime&gt;.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.GetHtmlPageResourcesFolder(GroupDocs.Viewer.Domain.CachedPageDescription)">
      <summary>
            Gets the html page resources folder path.
            </summary>
      <param name="cachedPageDescription">The cached page description</param>
      <returns>System.String</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.GetHtmlPageResources(GroupDocs.Viewer.Domain.CachedPageDescription)">
      <summary>
             Gets the html page resources descriptions.
            </summary>
      <param name="cachedPageDescription">The cached page description</param>
      <returns>List of page resources descriptions</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.GetFilePath(GroupDocs.Viewer.Domain.CacheFileDescription)">
      <summary>
            Gets the path to the cached document.
            </summary>
      <param name="cacheFileDescription">The cached document description</param>
      <returns>System.String</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.ClearCache(System.TimeSpan)">
      <summary>
            Clears cache, older than the specified time interval.
            </summary>
      <param name="olderThan">The time interval</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.ClearCache">
      <summary>
            Clears all files from cache.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Cache.ICacheDataHandler.ClearCache(System.String)">
      <summary>
             Clears cache of the specified document.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
             relative path e.g document.txt, url e.g. http://site.com/document.txt.
             </param>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.Cache.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Handler.Cache</b> namespace exposes interfaces which should be implemented to customize caching behaviour.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.Input.IInputDataHandler">
      <summary>
            Exposes members for loading original document from storage
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Input.IInputDataHandler.GetFile(System.String)">
      <summary>
            Retrieves file from storage.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g.http://site.com/document.txt
            </param>
      <returns>An open stream read from to get the data from storage.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Input.IInputDataHandler.GetEntities(System.String)">
      <summary>
            Gets files and folders for specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.FileDescription&gt;.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Input.IInputDataHandler.GetFileDescription(System.String)">
      <summary>
            Gets the file description.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g.http://site.com/document.txt
            </param>
      <returns>GroupDocs.Viewer.Domain.FileDescription.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.Input.IInputDataHandler.GetLastModificationDate(System.String)">
      <summary>
            Gets the file last modification date.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g.http://site.com/document.txt
            </param>
      <returns>The date and time the file was last modified.</returns>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.Input.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Handler.Input</b> namespace exposes interfaces which should be implemented to customize document loading behaviour.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.ViewerHandler`1">
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
      <summary>
            Base class for Viewer handlers.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Handler.ViewerHandler`1.ViewerConfig">
      <summary>
            The viewer configuration.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Handler.ViewerHandler`1.InputDataHandler">
      <summary>
            The input data handler.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Handler.ViewerHandler`1.CacheDataHandler">
      <summary>
            The cache data handler.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetSupportedDocumentFormats">
      <summary>
            Gets supported document formats.
            </summary>
      <remarks>
            SupportedDocumentFormats property of DocumentFormatsContainer object,
            contains the list of document formats supported by GroupDocs.Viewer library.
            </remarks>
      <example>
            The following example demonstrates how to get the list of supported document formats.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            DocumentFormatsContainer supportedFormats = htmlHandler.GetSupportedDocumentFormats();
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetUnlicensedViewCountExceededPage(GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get unlicensed view count exceeded page.
            </summary>
      <returns>Page</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetAttachmentName(GroupDocs.Viewer.Domain.AttachmentBase)">
      <summary>
            Gets the attachment name
            </summary>
      <param name="attachment">The attachment.</param>
      <returns>Attachment name.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetAttachmentContainer(GroupDocs.Viewer.Domain.AttachmentBase,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get the attachment file.
            </summary>
      <param name="attachment">The attachment.</param>
      <param name="renderOptions">The render options.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.String)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            </remarks>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\aspose-logo.jpg";
            
            DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(guid);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.String,GroupDocs.Viewer.Domain.Options.DocumentInfoOptions)">
      <summary>
             Gets the document information.
             </summary>
      <remarks>
             Use this method to get document specific information,  
             like created date, file size, number of pages and etc.
             </remarks>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
             relative path e.g document.txt, url e.g. http://site.com/document.txt.
             </param>
      <param name="documentInfoOptions">The DocumentInfoOptions.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
             The following example demonstrates how to get document information.
             <code lang="C#">
             ViewerConfig config = new ViewerConfig();
             ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
             DocumentInfoOptions options = new DocumentInfoOptions();
             options.Password = "mypass";
             string guid = @"C:\storage\protected.pdf"; 
             
             DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(guid, options);
             </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.IO.Stream)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            using (FileStream fileStream = new FileStream(@"C:\storage\aspose-logo.jpg", FileMode.Open))
            {
                DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(fileStream);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.IO.Stream,GroupDocs.Viewer.Domain.Options.DocumentInfoOptions)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <param name="documentInfoOptions">The DocumentInfoOptions.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            using (FileStream fileStream = new FileStream(@"C:\storage\protected.pdf", FileMode.Open))
            {
                DocumentInfoOptions options = new DocumentInfoOptions();
                options.Password = "mypass";
            
                DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(fileStream, options);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.IO.Stream,System.String)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <param name="fileName">The file name.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            using (FileStream fileStream = new FileStream(@"C:\storage\aspose-logo.jpg", FileMode.Open))
            {
                DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(fileStream, "aspose-logo.jpg");
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.IO.Stream,System.String,GroupDocs.Viewer.Domain.Options.DocumentInfoOptions)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <param name="fileName">The file name.</param>
      <param name="documentInfoOptions">The DocumentInfoOptions.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            using (FileStream fileStream = new FileStream(@"C:\storage\protected.pdf", FileMode.Open))
            {
                DocumentInfoOptions options = new DocumentInfoOptions();
                options.Password = "mypass";
            
                DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(fileStream, "protected.pdf", options);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.Uri)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            </remarks>
      <param name="uri">The uri.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            Uri uri = new Uri("http://example.com/sample.doc");
            
            DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(uri);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.Uri,GroupDocs.Viewer.Domain.Options.DocumentInfoOptions)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            </remarks>
      <param name="uri">The uri.</param>
      <param name="documentInfoOptions">The DocumentInfoOptions.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            DocumentInfoOptions options = new DocumentInfoOptions();
            options.WordsOptions.Encoding = Encoding.UTF8;
            Uri uri = new Uri("http://example.com/sample.doc");
            
            DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(uri, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetDocumentInfo(System.Uri,GroupDocs.Viewer.Domain.WindowsAuthenticationCredential,GroupDocs.Viewer.Domain.Options.DocumentInfoOptions)">
      <summary>
            Gets the document information.
            </summary>
      <remarks>
            Use this method to get document specific information,  
            like created date, file size, number of pages and etc.
            </remarks>
      <param name="uri">The uri.</param>
      <param name="credential">The credential.</param>
      <param name="documentInfoOptions">The DocumentInfoOptions.</param>
      <returns>DocumentInfoContainer.</returns>
      <example>
            The following example demonstrates how to get document information.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            DocumentInfoOptions options = new DocumentInfoOptions();
            options.WordsOptions.Encoding = Encoding.UTF8;
            WindowsAuthenticationCredential credentials = new WindowsAuthenticationCredential("user", "password");
            Uri uri = new Uri("http://example.com/sample.doc");
            
            DocumentInfoContainer documentInfo = imageHandler.GetDocumentInfo(uri, credentials, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.RotatePage(System.String,GroupDocs.Viewer.Domain.Options.RotatePageOptions)">
      <summary>
            Rotates the page.
            </summary>
      <remarks>
            To get the rotated representation of initial document pass RenderOptions object
            with Transformations property set to Transformations.Rotate to GetPages method as shown in example.
            </remarks>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <param name="rotatePageOptions">The rotatePageOptions.</param>
      <example>
            The following example demonstrates how to rotate the 1st page of the document by 90 degree 
            and get the list of pages including rotated pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            string guid = @"C:\storage\document.doc";
            RotatePageOptions rotateOptions = new RotatePageOptions(1, 90);
            imageHandler.RotatePage(guid, rotateOptions);
            ImageOptions imageOptions = new ImageOptions
            {
                Transformations = Transformation.Rotate
            };
            
            List&lt;PageImage&gt; imagePages = imageHandler.GetPages(guid, imageOptions);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.RotatePage(System.String,GroupDocs.Viewer.Domain.Options.RotatePageOptions,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Rotates the page.
            </summary>
      <remarks>
            To get the rotated representation of initial document, pass RenderOptions object
            with Transformations property set to Transformations.Rotate to GetPages method, as shown in an example.
            </remarks>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <param name="rotatePageOptions">The page rotation options.</param>
      <param name="renderOptions">The render options.</param>
      <example>
            The following example demonstrates how to rotate the 3rd page of the document with hidden pages,
            by 90 degree and get the list of pages including rotated pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            ImageOptions imageOptions = new ImageOptions();
            imageOptions.ShowHiddenPages = true;
            
            string guid = @"C:\storage\document.pptx";
            RotatePageOptions rotateOptions = new RotatePageOptions(3, 90);
            imageHandler.RotatePage(guid, rotateOptions, imageOptions);
            
            imageOptions.Transformations = Transformation.Rotate;
            List&lt;PageImage&gt; imagePages = imageHandler.GetPages(guid, imageOptions);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.ReorderPage(System.String,GroupDocs.Viewer.Domain.Options.ReorderPageOptions)">
      <summary>
            Reorders the page.
            </summary>
      <remarks>
            To include reordered pages into the list of pages from GetPages method, pass RenderOptions
            object with Transformations property set to Transformations.Reorder as shown in example.
            </remarks>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="reorderPageOptions">The reorder page options.</param>
      <example>
            The following example demonstrates how to reorder document pages
            and get the list of pages including reordered pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            string guid = @"C:\storage\document.doc";
            ReorderPageOptions options = new ReorderPageOptions(1, 2);
            htmlHandler.ReorderPage(guid, options);
            HtmlOptions htmlOptions = new HtmlOptions
            {
                Transformations = Transformation.Reorder
            }
            
            List&lt;PageHtml&gt; htmlPages = htmlHandler.GetPages(guid, htmlOptions);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.ReorderPage(System.String,GroupDocs.Viewer.Domain.Options.ReorderPageOptions,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Reorders the page.
            </summary>
      <remarks>
            To include reordered pages into the list of pages from GetPages method, pass RenderOptions
            object with Transformations property set to Transformations.Reorder, as shown in an example.
            </remarks>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="reorderPageOptions">The reorder page options.</param>
      <param name="renderOptions">The render options.</param>
      <example>
            The following example demonstrates how to reorder document pages
            and get the list of pages including reordered pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            HtmlOptions htmlOptions = new HtmlOptions();
            htmlOptions.ShowHiddenPages = true;
            
            string guid = @"C:\storage\document.pptx";
            ReorderPageOptions options = new ReorderPageOptions(1, 3);
            htmlHandler.ReorderPage(guid, options, htmlOptions);
            
            htmlOptions.Transformations = Transformation.Reorder;
            List&lt;PageHtml&gt; htmlPages = htmlHandler.GetPages(guid, htmlOptions);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPrintableHtml(System.String,GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions)">
      <summary>
            Get document html for print.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <param name="printableHtmlOptions">The rotatePageOptions.</param>
      <returns>PrintableHtmlContainer.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPrintableHtml(System.String)">
      <summary>
            Get document html for print.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <returns>PrintableHtmlContainer.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetFile(System.String)">
      <summary>
            Get original file.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <returns>FileContainer.</returns>
      <example>
            The following example demonstrates how to get original file 
            represented by a <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\aspose-logo.jpg";
            
            FileContainer container = imageHandler.GetFile(guid);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetFile(GroupDocs.Viewer.Domain.AttachmentBase)">
      <summary>
            Get attachment file.
            </summary>
      <param name="attachment">The attachment descriptor.</param>
      <returns>FileContainer.</returns>
      <example>
            The following example demonstrates how to get original file represented 
            by a <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" /> from the document attachment.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            DocumentInfoContainer info = htmlHandler.GetDocumentInfo(@"C:\storage\document-with-attachments.msg");
            
            foreach (AttachmentBase attachment in info.Attachments)
            {
                FileContainer container = htmlHandler.GetFile(attachment);
               // use container.Stream to work with a file.
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPages(System.String,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get list of pages representations from guid using render options.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="renderOptions">The render options.</param>
      <returns>List of converted pages</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPages(System.IO.Stream,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get list of pages representations from Stream using render options.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="renderOptions">The render options.</param>
      <returns>List of converted pages</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPages(System.IO.Stream,System.String,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get list of pages representations from Stream using file name and render options.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="fileName">The file name.</param>
      <param name="renderOptions">The render options.</param>
      <returns>List of converted pages</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPages(System.Uri,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get list of pages representations from uri using render options.
            </summary>
      <param name="uri">The uri.</param>
      <param name="renderOptions">The render options.</param>
      <returns>List of converted pages</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPages(System.Uri,GroupDocs.Viewer.Domain.WindowsAuthenticationCredential,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get list of pages representations from uri with credentials using render options.
            </summary>
      <param name="uri">The uri.</param>
      <param name="credential">The credential.</param>
      <param name="renderOptions">The render options.</param>
      <returns>List of converted pages.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPages(GroupDocs.Viewer.Domain.AttachmentBase,GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get list of pages representations of the attachment using render options.
            </summary>
      <param name="attachment">The attachment descriptor.</param>
      <param name="renderOptions">The render options.</param>
      <returns>List of converted pages.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.ClearCache">
      <summary>
            Clears all of the cache.
            </summary>
      <example>
            The following example demonstrates how to clear the cache.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.EnableCaching = true;
            config.CachePath = @"C:\storage\cachefiles\";
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            List&lt;PageImage&gt; imagePages = imageHandler.GetPages(guid);
            imageHandler.ClearCache();
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.ClearCache(System.String)">
      <summary>
             Clears cache of the specified document.
             </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
             relative path e.g document.txt, url e.g. http://site.com/document.txt.
             </param>
             /// <example>
             The following example demonstrates how to clear the cache of the specified document.
             <code lang="C#">
             ViewerConfig config = new ViewerConfig();
             string guid = @"C:\storage\document.doc";
            
             imageHandler.ClearCache(guid);
             </code></example></member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.ClearCache(System.TimeSpan)">
      <summary>
            Clears files from cache older than specified time interval.
            </summary>
      <param name="olderThan">The time interval.</param>
      <example>
            The following example demonstrates how to clear files from cache older than specified time interval.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            TimeSpan timeSpan = TimeSpan.FromDays(1);
            imageHandler.ClearCache(timeSpan);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.String)">
      <summary>
            Gets the PDF file.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            FileContainer container = imageHandler.GetPdfFile(guid);
            //use container.Stream to manipulate pdf representation of the input file.
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.String,GroupDocs.Viewer.Domain.Options.PdfFileOptions)">
      <summary>
            Gets the PDF file.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="pdfFileOptions">Pdf file options.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            PdfFileOptions pdfFileOptions = new PdfFileOptions();
            pdfFileOptions.Watermark = new Watermark("For Test Only");
            string guid = @"C:\storage\document.doc";
            
            FileContainer container = imageHandler.GetFile(guid);
            //use container.Stream to manipulate pdf representation of the input file.
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.IO.Stream)">
      <summary>
            Gets the PDF file.
            </summary>
      <param name="fileStream">The file stream.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            using (FileStream fileStream = new FileStream("document.doc", FileMode.Open))
            {
                FileContainer container = imageHandler.GetPdfFile(fileStream);
                //use container.Stream to manipulate pdf representation of the input file.
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.IO.Stream,GroupDocs.Viewer.Domain.Options.PdfFileOptions)">
      <summary>
            Gets the PDF file.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="pdfFileOptions">The pdf file options.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            PdfFileOptions pdfFileOptions = new PdfFileOptions();
            pdfFileOptions.Watermark = new Watermark("For Test Only");
            
            using (FileStream fileStream = new FileStream("document.doc", FileMode.Open))
            {
                FileContainer container = imageHandler.GetPdfFile(fileStream, pdfFileOptions);
                //use container.Stream to manipulate pdf representation of the input file.
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.IO.Stream,System.String)">
      <summary>
            Gets the PDF file.
            </summary>
      <remarks>
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <param name="fileName">The file name that contains extension.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string fileName = "document.doc";
            
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open))
            {
                FileContainer container = imageHandler.GetPdfFile(fileStream, fileName);
                //use container.Stream to manipulate pdf representation of the input file.
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.IO.Stream,System.String,GroupDocs.Viewer.Domain.Options.PdfFileOptions)">
      <summary>
            Gets the PDF file.
            </summary>
      <remarks>
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <param name="fileName">The file name that contains extension.</param>
      <param name="pdfFileOptions">The pdf file options.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            PdfFileOptions pdfFileOptions = new PdfFileOptions();
            pdfFileOptions.Watermark = new Watermark("For Test Only");
            string fileName = "document.doc";
            
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open))
            {
                FileContainer container = imageHandler.GetPdfFile(fileStream, fileName, pdfFileOptions);
                //use container.Stream to manipulate pdf representation of the input file.
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.Uri)">
      <summary>
            Gets the PDF file.
            </summary>
      <param name="uri">The uri.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            Uri uri = new Uri("http://example.com/sample.doc");
            
            FileContainer container = imageHandler.GetPdfFile(uri);
            //use container.Stream to manipulate pdf representation of the input file.
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.Uri,GroupDocs.Viewer.Domain.Options.PdfFileOptions)">
      <summary>
            Gets the PDF file.
            </summary>
      <param name="uri">The uri.</param>
      <param name="pdfFileOptions">Pdf file options.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            Uri uri = new Uri("http://example.com/sample.doc");
            PdfFileOptions pdfFileOptions = new PdfFileOptions();
            pdfFileOptions.Watermark = new Watermark("For Test Only");
            
            FileContainer container = imageHandler.GetPdfFile(uri, pdfFileOptions);
            //use container.Stream to manipulate pdf representation of the input file.
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetPdfFile(System.Uri,GroupDocs.Viewer.Domain.WindowsAuthenticationCredential,GroupDocs.Viewer.Domain.Options.PdfFileOptions)">
      <summary>
            Gets the PDF file.
            </summary>
      <param name="uri">The uri.</param>
      <param name="credential">The credential.</param>
      <param name="pdfFileOptions">Pdf file options.</param>
      <returns>The file container <see cref="T:GroupDocs.Viewer.Domain.Containers.FileContainer" />.</returns>
      <example>
            The following example demonstrates how to render document as PDF. 
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            WindowsAuthenticationCredential credentials = new WindowsAuthenticationCredential("user", "password");
            PdfFileOptions pdfFileOptions = new PdfFileOptions();
            pdfFileOptions.Watermark = new Watermark("For Test Only");
            Uri uri = new Uri("http://example.com/sample.doc");
            
            FileContainer container = imageHandler.GetPdfFile(uri, credentials, pdfFileOptions);
            //use container.Stream to manipulate pdf representation of the input file.
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetFileList">
      <summary>
            Retrieves the list of files and directories from the root storage path.
            </summary>
      <remarks>
            Use IsDirectory property of FileDescription objects to distinguish files from folders.
            </remarks>
      <returns>The container with list of files and directories.</returns>
      <example>
            The following example demonstrates how to retrieve and loop 
            through the list of files and directories for root storage path.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            config.StoragePath = @"C:\storage";
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            FileListContainer container = imageHandler.GetFileList();
            
            foreach (FileDescription node in container.Files)
            {
                   //use list of FileDescription objects.
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHandler`1.GetFileList(GroupDocs.Viewer.Domain.Options.FileListOptions)">
      <summary>
            Retrieves the list of files and directories from the custom path.
            </summary>
      <remarks>
            Use IsDirectory property of FileDescription objects to distinguish files from folders.
            </remarks>
      <param name="fileListOptions">The options which specify sorting and ordering.</param>
      <returns>The container with list of files and directories.</returns>
      <example>
            The following example demonstrates how to retrieve and loop through the list
            of files and directories for custom path with sorting and ordering.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            FileListOptions options = new FileListOptions(@"C:\storage",
                FileListOptions.FileListSortBy.Name,FileListOptions.FileListOrderBy.Ascending);
            
            FileListContainer container = imageHandler.GetFileList(options);
            
            foreach (FileDescription node in container.Files)
            {
                   //use list of FileDescription objects.
            }
            </code></example>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler">
      <summary>
            Handler for viewing document in HTML mode.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler,GroupDocs.Viewer.Handler.Cache.ICacheDataHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
      <param name="cacheDataHandler">The cache data handler.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler,GroupDocs.Viewer.Handler.Cache.ICacheDataHandler,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
      <param name="cacheDataHandler">The cache data handler.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Storage.IFileStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="fileStorage">The file storage.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Storage.IFileStorage,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="fileStorage">The file storage.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Storage.IFileStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="fileStorage">The file storage.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Storage.IFileStorage,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerHtmlHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="fileStorage">The file storage.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.String)">
      <summary>
            Get list of pages html representations
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            string guid = @"C:\storage\document.doc";
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.String,GroupDocs.Viewer.Converter.Options.HtmlOptions)">
      <summary>
            Get list of pages html representations.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="htmlOptions">The HTML options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get html representations of the second page.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            HtmlOptions options = new HtmlOptions();
            options.PageNumber = 2;
            options.CountPagesToRender = 1;
            string guid = @"C:\storage\document.doc";
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.IO.Stream)">
      <summary>
            Get list of pages html representations.
            </summary>
      <param name="fileStream">The file stream.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            using (FileStream fileStream = new FileStream("document.doc", FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
                List&lt;PageHtml&gt; pages = htmlHandler.GetPages(fileStream);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.IO.Stream,GroupDocs.Viewer.Converter.Options.HtmlOptions)">
      <summary>
            Get list of pages html representations.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="htmlOptions">The HTML options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get html representations of the first and third pages.
            <code lang="C#">
            using (FileStream fileStream = new FileStream("document.doc", FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
                HtmlOptions options = new HtmlOptions();
                options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            
                List&lt;PageHtml&gt; pages = htmlHandler.GetPages(fileStream, options);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.IO.Stream,System.String)">
      <summary>
            Get list of pages html representations.
            </summary>
      <remarks>
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileName">The file name.</param>
      <param name="fileStream">The file stream.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            string fileName = "document.doc";
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
                List&lt;PageHtml&gt; pages = htmlHandler.GetPages(fileStream, fileName);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.IO.Stream,System.String,GroupDocs.Viewer.Converter.Options.HtmlOptions)">
      <summary>
            Get list of pages html representations.
            </summary>
      <remarks>
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileName">The file name.</param>
      <param name="fileStream">The file stream.</param>
      <param name="htmlOptions">The HTML options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get html representations of the first and third pages.
            <code lang="C#">
            string fileName = "document.doc";
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
                HtmlOptions options = new HtmlOptions();
                options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            
                List&lt;PageHtml&gt; pages = htmlHandler.GetPages(fileStream, fileName, options);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.Uri)">
      <summary>
            Get list of pages html representations.
            </summary>
      <param name="uri">The uri.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            Uri uri = new Uri("http://example.com/sample.doc");
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(uri);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.Uri,GroupDocs.Viewer.Converter.Options.HtmlOptions)">
      <summary>
            Get list of pages html representations.
            </summary>
      <param name="uri">The uri.</param>
      <param name="htmlOptions">The HTML options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get the html representations of the first and third pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            HtmlOptions options = new HtmlOptions();
            options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            Uri uri = new Uri("http://example.com/sample.doc");
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(uri, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(System.Uri,GroupDocs.Viewer.Domain.WindowsAuthenticationCredential,GroupDocs.Viewer.Converter.Options.HtmlOptions)">
      <summary>
            Get list of pages html representations.
            </summary>
      <param name="uri">The uri.</param>
      <param name="credential">The credential.</param>
      <param name="htmlOptions">The HTML options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get html representations of the first and third pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            HtmlOptions options = new HtmlOptions();
            options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            WindowsAuthenticationCredential credentials = new WindowsAuthenticationCredential("user", "password");
            Uri uri = new Uri("http://example.com/sample.doc");
            
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(uri, credentials, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(GroupDocs.Viewer.Domain.AttachmentBase)">
      <summary>
            Get list of pages html representations for attachment.
            </summary>
      <param name="attachment">The attachment descriptor.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get the html representations of the attachment.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            DocumentInfoContainer info = htmlHandler.GetDocumentInfo(@"C:\storage\document-with-attachments.msg");
            
            foreach (AttachmentBase attachment in info.Attachments)
            {
                List&lt;PageHtml&gt; pages = htmlHandler.GetPages(attachment);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPages(GroupDocs.Viewer.Domain.AttachmentBase,GroupDocs.Viewer.Converter.Options.HtmlOptions)">
      <summary>
            Get list of pages html representations for attachment.
            </summary>
      <param name="attachment">The attachment descriptor.</param>
      <param name="htmlOptions">The HTML options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Html.PageHtml&gt;.</returns>
      <example>
            The following example demonstrates how to get the html representations of the attachment.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            
            DocumentInfoContainer info = htmlHandler.GetDocumentInfo(@"C:\storage\document-with-attachments.msg");
            HtmlOptions htmlOptions = new HtmlOptions();
            htmlOptions.EmbedResources = false;
            
            foreach (AttachmentBase attachment in info.Attachments)
            {
                List&lt;PageHtml&gt; pages = htmlHandler.GetPages(attachment, htmlOptions);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetResource(System.String,GroupDocs.Viewer.Domain.Html.HtmlResource)">
      <summary>
            Get html page resource stream.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="htmlResource">The resource description.</param>
      <returns>Resource stream</returns>
      <example>
            The following example demonstrates how to get resource stream 
            of each HtmlResource in html representation pages of the document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            string guid = @"C:\storage\document.doc";
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(guid);
            
            foreach (PageHtml page in pages)
            {
                foreach (HtmlResource resource in page.HtmlResources)
                {
                   Stream resourceStream = htmlHandler.GetResource(guid, resource);
                   Console.WriteLine(resourceStream.Length);
                }
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetResource(GroupDocs.Viewer.Domain.AttachmentBase,GroupDocs.Viewer.Domain.Html.HtmlResource)">
      <summary>
            Get html page resource stream.
            </summary>
      <param name="attachment">The attachment descriptor.</param>
      <param name="htmlResource">The resource description.</param>
      <returns>Resource stream</returns>
      <example>
            The following example demonstrates how to get resource stream 
            of each HtmlResource in html representation pages of the document attachment.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            EmailAttachment attachment = new EmailAttachment(@"C:\storage\document-with-attachments.msg", "attachment-image.png");
            List&lt;PageHtml&gt; pages = htmlHandler.GetPages(attachment);
            
            foreach (PageHtml page in pages)
            {   
                foreach (HtmlResource htmlResource in page.HtmlResources)
                {
                    Stream resourceStream = htmlHandler.GetResource(attachment, htmlResource);
                    Console.WriteLine("Resource: {0}, size: {1}", htmlResource.ResourceName,resourceStream.Length);
                }
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPrintableHtml(System.String)">
      <summary>
            Gets the printable HTML.
            </summary>
      <example>
            The following example demonstrates how to get printable HTML of the document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            string guid = @"C:\storage\document.doc";
            PrintableHtmlOptions options = new PrintableHtmlOptions(guid);
            
            PrintableHtmlContainer container = htmlHandler.GetPrintableHtml(options);
            </code></example>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <returns>GroupDocs.Viewer.Domain.Responses.PrintableHtmlContainer.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetPrintableHtml(System.String,GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions)">
      <summary>
            Gets the printable HTML.
            </summary>
      <example>
            The following example demonstrates how to get printable HTML of the document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerHtmlHandler htmlHandler = new ViewerHtmlHandler(config);
            string guid = @"C:\storage\document.doc";
            PrintableHtmlOptions options = new PrintableHtmlOptions(guid);
            
            PrintableHtmlContainer container = htmlHandler.GetPrintableHtml(options);
            </code></example>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <param name="printableHtmlOptions">The printableHtmlOptions.</param>
      <returns>GroupDocs.Viewer.Domain.Responses.PrintableHtmlContainer.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerHtmlHandler.GetUnlicensedViewCountExceededPage(GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Gets the unlicensed view count exceeded HTML.
            </summary>
      <returns>GroupDocs.Viewer.Domain.Html.PageHtml.</returns>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.ViewerImageHandler">
      <summary>
            Handler for viewing document in Image mode.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler,GroupDocs.Viewer.Handler.Cache.ICacheDataHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
      <param name="cacheDataHandler">The cache data handler.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Handler.Input.IInputDataHandler,GroupDocs.Viewer.Handler.Cache.ICacheDataHandler,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="inputDataHandler">The input data handler.</param>
      <param name="cacheDataHandler">The cache data handler.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Storage.IFileStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="fileStorage">The file storage.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Storage.IFileStorage,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="fileStorage">The file storage.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Storage.IFileStorage)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="fileStorage">The file storage.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.#ctor(GroupDocs.Viewer.Config.ViewerConfig,GroupDocs.Viewer.Storage.IFileStorage,System.Globalization.CultureInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:GroupDocs.Viewer.Handler.ViewerImageHandler" /> class.
            </summary>
      <param name="viewerConfig">The viewer configuration.</param>
      <param name="fileStorage">The file storage.</param>
      <param name="cultureInfo">The viewer culture. Supported cultures are en-Us, pt-PT and ru-RU.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.String)">
      <summary>
            Get list of pages image representations.
            </summary>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid);
            </code></example>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.String,GroupDocs.Viewer.Converter.Options.ImageOptions)">
      <summary>
            Get list of pages image representations.
            </summary>
      <param name="guid">The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt.
            </param>
      <param name="imageOptions">The image options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get image representations of the second page.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            ImageOptions options = new ImageOptions();
            options.PageNumber = 2;
            options.CountPagesToRender = 1;
            string guid = @"C:\storage\document.doc";
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(guid, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.IO.Stream)">
      <summary>
            Get list of pages image representations.
            </summary>
      <param name="fileStream">The file stream.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            using (FileStream fileStream = new FileStream("document.doc", FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
                List&lt;PageImage&gt; pages = imageHandler.GetPages(fileStream);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.IO.Stream,GroupDocs.Viewer.Converter.Options.ImageOptions)">
      <summary>
            Get list of pages image representations.
            </summary>
      <param name="fileStream">The file stream.</param>
      <param name="imageOptions">The image options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get image representations of the first and third pages.
            <code lang="C#">
            using (FileStream fileStream = new FileStream("document.doc", FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerImageHandler imageHandler = new ViewerImageHandler(config);
                ImageOptions options = new ImageOptions();
                options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            
                List&lt;PageImage&gt; pages = imageHandler.GetPages(fileStream, options);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.IO.Stream,System.String)">
      <summary>
            Get list of pages image representations.
            </summary>
      <remarks>
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <param name="fileName">The file name.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            string fileName = "document.doc";
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
                List&lt;PageImage&gt; pages = imageHandler.GetPages(fileStream, fileName);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.IO.Stream,System.String,GroupDocs.Viewer.Converter.Options.ImageOptions)">
      <summary>
            Get list of pages image representations.
            </summary>
      <remarks>
            Passing file name along with the file Stream, in contract to passing just file Stream
            will result in reduced processing time, because file type detection operation won't be involved.
            </remarks>
      <param name="fileStream">The file stream.</param>
      <param name="fileName">The file name.</param>
      <param name="imageOptions">The image options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get image representations of the first and third pages.
            <code lang="C#">
            string fileName = "document.doc";
            using (FileStream fileStream = new FileStream(fileName, FileMode.Open))
            {
                ViewerConfig config = new ViewerConfig();
                ViewerImageHandler imageHandler = new ViewerImageHandler(config);
                ImageOptions options = new ImageOptions();
                options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            
                List&lt;PageImage&gt; pages = imageHandler.GetPages(fileStream, fileName, options);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.Uri)">
      <summary>
            Get list of pages image representations.
            </summary>
      <param name="uri">The uri.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get the list of pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            Uri uri = new Uri("http://example.com/sample.doc");
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(uri);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.Uri,GroupDocs.Viewer.Converter.Options.ImageOptions)">
      <summary>
            Get list of pages image representations.
            </summary>
      <param name="uri">The uri.</param>
      <param name="imageOptions">The image options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get the image representations of the first and third pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            ImageOptions options = new ImageOptions();
            options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            Uri uri = new Uri("http://example.com/sample.doc");
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(uri, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(System.Uri,GroupDocs.Viewer.Domain.WindowsAuthenticationCredential,GroupDocs.Viewer.Converter.Options.ImageOptions)">
      <summary>
            Get list of pages image representations.
            </summary>
      <param name="uri">The uri.</param>
      <param name="credential">The credential.</param>
      <param name="imageOptions">The image options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get image representations of the first and third pages.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            ImageOptions options = new ImageOptions();
            options.PageNumbersToRender = new List&lt;int&gt;() { 1, 3 };
            WindowsAuthenticationCredential credentials = new WindowsAuthenticationCredential("user", "password");
            Uri uri = new Uri("http://example.com/sample.doc");
            
            List&lt;PageImage&gt; pages = imageHandler.GetPages(uri, credentials, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(GroupDocs.Viewer.Domain.AttachmentBase)">
      <summary>
            Get list of pages image representations for attachment.
            </summary>
      <param name="attachment">The attachment descriptor.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get the image representations of the attachment.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            DocumentInfoContainer info = imageHandler.GetDocumentInfo(@"C:\storage\document-with-attachments.msg");
            
            foreach (AttachmentBase attachment in info.Attachments)
            {
                List&lt;PageImage&gt; pages = imageHandler.GetPages(attachment);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPages(GroupDocs.Viewer.Domain.AttachmentBase,GroupDocs.Viewer.Converter.Options.ImageOptions)">
      <summary>
            Get list of pages image representations for attachment.
            </summary>
      <param name="attachment">The attachment descriptor.</param>
      <param name="imageOptions">The image options.</param>
      <returns>System.Collections.Generic.List&lt;GroupDocs.Viewer.Domain.Image.PageImage&gt;.</returns>
      <example>
            The following example demonstrates how to get the image representations of the attachment.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            
            DocumentInfoContainer info = imageHandler.GetDocumentInfo(@"C:\storage\document-with-attachments.msg");
            ImageOptions imageOptions = new ImageOptions();
            imageOptions.ConvertImageFileType = ConvertImageFileType.JPG;
            
            foreach (AttachmentBase attachment in info.Attachments)
            {
                List&lt;PageImage&gt; pages = imageHandler.GetPages(attachment, imageOptions);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPrintableHtml(System.String,GroupDocs.Viewer.Domain.Options.PrintableHtmlOptions)">
      <summary>
            Gets the printable HTML.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <param name="printableHtmlOptions">The printableHtmlOptions.</param>
      <returns>GroupDocs.Viewer.Domain.Responses.PrintableHtmlContainer.</returns>
      <example>
            The following example demonstrates how to get printable HTML of the document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            Watermark watermark = new Watermark("Watermark text");
            string css = "a { color: hotpink; }";
            PrintableHtmlOptions options = new PrintableHtmlOptions();
            options.Watermark = watermark;
            options.Css = css;        
            
            imageHandler.GetPrintableHtml(guid, options);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetPrintableHtml(System.String)">
      <summary>
            Gets the printable HTML.
            </summary>
      <param name="guid">
            The file unique identifier, full path for local storage e.g. c:\\storage\\document.txt,
            relative path e.g document.txt, url e.g. http://site.com/document.txt 
            </param>
      <returns>GroupDocs.Viewer.Domain.Responses.PrintableHtmlContainer.</returns>
      <example>
            The following example demonstrates how to get printable HTML of the document.
            <code lang="C#">
            ViewerConfig config = new ViewerConfig();
            ViewerImageHandler imageHandler = new ViewerImageHandler(config);
            string guid = @"C:\storage\document.doc";
            
            PrintableHtmlContainer container = imageHandler.GetPrintableHtml(guid);
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.Handler.ViewerImageHandler.GetUnlicensedViewCountExceededPage(GroupDocs.Viewer.Converter.Options.RenderOptions)">
      <summary>
            Get unlicensed view count exceeded page.
            </summary>
      <returns>Page</returns>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Handler</b> namespace provides classes for working with rendering handlers.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Handler.NamespaceGroupDoc">
      <summary>
            The <b>GroupDocs.Viewer.Handler</b> namespace provides classes for working with rendering handlers.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Metered">
      <summary>
            Provides methods to set metered key.
            </summary>
      <example>
            In this example, an attempt will be made to set metered public and private key
            
            <ms><code>
            [C#]
            
            Metered matered = new Metered();
            matered.SetMeteredKey("PublicKey", "PrivateKey");
            
            
            [Visual Basic]
            
            Dim matered As Metered = New Metered
            matered.SetMeteredKey("PublicKey", "PrivateKey")
            </code></ms><java>
            the component jar file:
            <code>
            Metered matered = new Metered();
            matered.setMeteredKey("PublicKey", "PrivateKey");
            </code></java></example>
    </member>
    <member name="M:GroupDocs.Viewer.Metered.SetMeteredKey(System.String,System.String)">
      <summary>
            Sets metered public and private key
            </summary>
      <param name="publicKey">public key</param>
      <param name="privateKey">private key</param>
    </member>
    <member name="M:GroupDocs.Viewer.Metered.GetConsumptionQuantity">
      <summary>
            Gets consumption quantity
            </summary>
      <returns>consumption quantity</returns>
    </member>
    <member name="T:GroupDocs.Viewer.License">
      <summary>
            Provides methods to license the component.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="licenseStream">The license stream.</param>
      <example>
            The following example demonstrates how to set a license
            passing Stream of the license file.
            <code lang="C#">
            using (FileStream licenseStream = new FileStream("LicenseFile.lic", FileMode.Open))
            {
                GroupDocs.Viewer.License lic = new GroupDocs.Viewer.License();
                lic.SetLicense(licenseStream);
            }
            </code></example>
    </member>
    <member name="M:GroupDocs.Viewer.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <param name="licensePath">The license path.</param>
      <example>
            The following example demonstrates how to set a license 
            passing a path to the license file.
            <code lang="C#">
            string licensePath = "GroupDocs.Viewer.lic";
            GroupDocs.Viewer.License lic = new GroupDocs.Viewer.License();
            lic.SetLicense(licensePath);
            </code></example>
    </member>
    <member name="T:GroupDocs.Viewer.Localization.ILocalizationHandler">
      <summary>
            Exposes members for messages localization.
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Localization.ILocalizationHandler.GetString(System.String)">
      <summary>
            Gets localized string by name.
            </summary>
      <param name="key">See <see cref="T:GroupDocs.Viewer.Localization.LocalizedStringKeys" /> for required keys and default templates.</param>
      <returns>The localized string or template.</returns>
    </member>
    <member name="T:GroupDocs.Viewer.Localization.LocalizedStringKeys">
      <summary>
             Represents a container for localization messages templates.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_CORRUPTED_OR_DAMAGED_FILE">
      <summary>
            The corrupted or damaged file exception template. 
            Default template is "Could not load file '{0}'. File is corrupted or damaged.", the {0} parameter is replaced by file GUID.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_FILE_TYPE_NOT_SUPPORTED">
      <summary>
            The file type not supported exception template.
            Default template is "File type '{0}' is not supported.", the {0} parameter is replaced by file extension.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_INVALID_PASSWORD">
      <summary>
            The invalid password exception template.
            Default template is "Unable to decrypt file '{0}'. Password is invalid.", the {0} parameter is replaced by file GUID.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_PASSWORD_PROTECTED_FILE">
      <summary>
            The password protected file exception template.
            Default template is "Unable to open encrypted file '{0}'. Please provide password.", the {0} parameter is replaced by file GUID.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_STORAGE_PATH_NOT_SPECIFIED">
      <summary>
            The storage path not specified exception message.
            Default message is "The storage path is not specified. Please provide storage path.".
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_CACHE_FILE_NOT_FOUND">
      <summary>
            The cache file not found exception template.
            Default template is "Could not find cached file '{0}'.", the {0} parameter is replaced by file path that was not found.
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_GUID_NOT_SPECIFIED">
      <summary>
            The GUID not specified exception message.
            Default message is "The file GUID is not specified. Please provide file GUID.".
            </summary>
    </member>
    <member name="F:GroupDocs.Viewer.Localization.LocalizedStringKeys.EXC_TMPL_TRANSFORMATION_FAILED_PAGE_NOT_EXIST">
      <summary>
            The transformation failed because provided page does not exist exception template.
            Default template is "Unable to transform file '{0}'. Page number '{1}' does not exist.", the {0} is replaced by file GUID, the {1} is replaced by page number.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Localization.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Localization</b> namespace provides classes for localization.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Storage.FileInfo">
      <summary>
            File information
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.FileInfo.Path">
      <summary>
            File or directory path
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.FileInfo.Size">
      <summary>
            File size in bytes
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.FileInfo.LastModified">
      <summary>
            Last modification date
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.FileInfo.IsDirectory">
      <summary>
            Indicates if file is directory
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Storage.IFileInfo">
      <summary>
            File information
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.IFileInfo.Path">
      <summary>
            File or directory path
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.IFileInfo.Size">
      <summary>
            File size in bytes
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.IFileInfo.LastModified">
      <summary>
            Last modification date
            </summary>
    </member>
    <member name="P:GroupDocs.Viewer.Storage.IFileInfo.IsDirectory">
      <summary>
            Indicates if file is directory
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.Storage.IFileStorage">
      <summary>
            File storage interface
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.IFileStorage.FileExists(System.String)">
      <summary>
            Checks if file exists
            </summary>
      <param name="path">File path.</param>
      <returns>
        <c>true</c> when file exists, otherwise <c>false</c></returns>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.IFileStorage.GetFile(System.String)">
      <summary>
            Retrieves file content
            </summary>
      <param name="path">File path.</param>
      <returns>Stream</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.IFileStorage.SaveFile(System.String,System.IO.Stream)">
      <summary>
            Saves file
            </summary>
      <param name="path">File path.</param>
      <param name="content">File content.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.IFileStorage.DeleteDirectory(System.String)">
      <summary>
            Removes directory
            </summary>
      <param name="path">Directory path.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.IFileStorage.GetFileInfo(System.String)">
      <summary>
            Retrieves file information
            </summary>
      <param name="path">File path.</param>
      <returns>File information.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.IFileStorage.GetFilesInfo(System.String)">
      <summary>
            Retrieves list of files and folders
            </summary>
      <param name="path">Directory path.</param>
      <returns>Files and folders.</returns>
    </member>
    <member name="T:GroupDocs.Viewer.Storage.LocalFileStorage">
      <summary>
            Local file storage
            </summary>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.LocalFileStorage.FileExists(System.String)">
      <summary>
            Checks if file exists
            </summary>
      <param name="path">File path.</param>
      <returns>
        <c>true</c> when file exists, otherwise <c>false</c></returns>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.LocalFileStorage.GetFile(System.String)">
      <summary>
            Retrieves file content
            </summary>
      <param name="path">File path.</param>
      <returns>Stream</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.LocalFileStorage.SaveFile(System.String,System.IO.Stream)">
      <summary>
            Saves file
            </summary>
      <param name="path">File path.</param>
      <param name="content">File content.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.LocalFileStorage.DeleteDirectory(System.String)">
      <summary>
            Removes directory
            </summary>
      <param name="path">Directory path.</param>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.LocalFileStorage.GetFileInfo(System.String)">
      <summary>
            Retrieves file information
            </summary>
      <param name="path">File path.</param>
      <returns>File information.</returns>
    </member>
    <member name="M:GroupDocs.Viewer.Storage.LocalFileStorage.GetFilesInfo(System.String)">
      <summary>
            Retrieves list of files and folders
            </summary>
      <param name="path">Directory path.</param>
      <returns>Files and folders.</returns>
    </member>
    <member name="T:GroupDocs.Viewer.Storage.NamespaceDoc">
      <summary>
            The <b>GroupDocs.Viewer.Storage</b> namespace provides members, that allow users to implement their own storage system.
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.NamespaceDoc">
      <summary>
            The scope for GroupDocs.Viewer classes. 
            </summary>
    </member>
    <member name="T:GroupDocs.Viewer.NamespaceGroupDoc">
      <summary>
            The scope for GroupDocs.Viewer classes. 
            </summary>
    </member>
  </members>
</doc>